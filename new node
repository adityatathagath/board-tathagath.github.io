To achieve this functionality using Tailwind CSS and JavaScript, you'll need to create a collapsible list with nested elements and handle click events to show/hide child elements and display the `id` in a textbox when a non-arrow element is clicked. Here's a basic outline of how you can approach this:

### HTML Structure

```html
<div class="space-y-2">
    <!-- Level 3 -->
    <div class="flex items-center">
        <div class="cursor-pointer">
            <span class="arrow-icon">▶</span> <!-- Arrow icon for collapse/expand -->
            <span class="level-item" data-id="41253">Macro</span> <!-- Display name, store id in data attribute -->
        </div>
    </div>
    <div class="ml-4"> <!-- Nested items under Level 3 -->
        <div class="flex items-center">
            <div class="cursor-pointer">
                <span class="arrow-icon">▶</span>
                <span class="level-item" data-id="4125032">Macrosc</span>
            </div>
        </div>
        <!-- More items under Level 4 -->
        <div class="ml-4">
            <div class="flex items-center">
                <div class="cursor-pointer">
                    <span class="arrow-icon">▶</span>
                    <span class="level-item" data-id="4125037474">Macronddnnd</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Repeat structure for other levels as needed -->
</div>

<!-- Textbox to display clicked item's ID -->
<div>
    <input type="text" id="selected-id" class="border-gray-300 border p-2 mt-4 w-full" readonly>
</div>
```

### JavaScript (with jQuery for simplicity)

```javascript
$(document).ready(function() {
    // Handle click on arrow icons to toggle visibility of child items
    $('.arrow-icon').click(function() {
        $(this).toggleClass('rotate-90'); // Add a rotation effect
        $(this).parent().next().toggle(); // Toggle visibility of nested items
    });

    // Handle click on level items (excluding arrows) to display ID in textbox
    $('.level-item').click(function() {
        var id = $(this).data('id'); // Retrieve ID from data attribute
        $('#selected-id').val(id); // Display ID in textbox
    });
});
```

### CSS (using Tailwind classes)

```css
.arrow-icon {
    width: 1rem; /* Adjust size as needed */
}

.rotate-90 {
    transform: rotate(90deg); /* Rotate arrow for visual indication of expand/collapse */
}
```

### Explanation:

1. **HTML Structure**: Each level (`3`, `4`, `5`, etc.) is represented as a nested `div`. The `arrow-icon` and `level-item` classes are used for arrows and level names, respectively. Each `level-item` contains a `data-id` attribute with the corresponding ID.

2. **JavaScript**: 
   - Clicking on `arrow-icon` toggles the visibility of nested items (`ml-4` divs).
   - Clicking on `level-item` displays its `data-id` in the textbox (`#selected-id`).

3. **CSS**: Utilizes Tailwind CSS classes for styling, including spacing and borders.

Make sure to include the necessary Tailwind CSS file in your project for these classes to work properly. Adjust the structure and styles as per your project's requirements and design preferences.