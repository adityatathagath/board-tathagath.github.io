from flask import Flask, jsonify, render_template, request
import pandas as pd

app = Flask(__name__)

# Load and process the data
file_path = 'data.xlsx'  # Replace with your actual file path
raw_data = pd.read_excel(file_path, header=None)

# Extract ranks, names, asset classes, and scores
ranks = raw_data.iloc[0, 1:].values.tolist()
player_names = raw_data.iloc[1, 1:].values.tolist()
asset_classes = raw_data.iloc[2:17, 0].values.tolist()
asset_scores = raw_data.iloc[2:17, 1:].values.tolist()
total_scores = raw_data.iloc[17, 1:].values.tolist()

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/api/leaderboard')
def leaderboard():
    # Combine ranks, names, and total scores into a leaderboard
    leaderboard_data = [
        {"rank": ranks[i], "name": player_names[i], "total_score": total_scores[i]}
        for i in range(len(ranks))
    ]
    leaderboard_data = sorted(leaderboard_data, key=lambda x: x["total_score"], reverse=True)
    return jsonify(leaderboard_data)

@app.route('/api/insights')
def insights():
    # Best Performing Player
    player_averages = [
        {"name": player_names[i], "average": sum(row[i] for row in asset_scores) / len(asset_classes)}
        for i in range(len(player_names))
    ]
    best_performing_player = max(player_averages, key=lambda x: x["average"])

    # Highest Scorer Across All Asset Classes
    highest_scorer_index = total_scores.index(max(total_scores))
    highest_scorer_asset = {
        "name": player_names[highest_scorer_index],
        "score": max(total_scores)
    }

    # Prepare insights data
    insights_data = {
        "best_performing_player": best_performing_player,
        "highest_scorer_asset": highest_scorer_asset,
    }
    return jsonify(insights_data)

@app.route('/api/compare')
def compare():
    player1 = request.args.get("player1")
    player2 = request.args.get("player2")

    player1_index = player_names.index(player1)
    player2_index = player_names.index(player2)

    comparison_data = {
        "assets": asset_classes,
        "player1_scores": [row[player1_index] for row in asset_scores],
        "player2_scores": [row[player2_index] for row in asset_scores],
    }
    return jsonify(comparison_data)

@app.route('/api/chart-data')
def chart_data():
    # Prepare data for charts
    top_10_indices = sorted(range(len(total_scores)), key=lambda x: total_scores[x], reverse=True)[:10]
    chart_data = {
        "top_10_names": [player_names[i] for i in top_10_indices],
        "top_10_scores": [total_scores[i] for i in top_10_indices],
        "assets": asset_classes,
        "asset_averages": [sum(scores) / len(scores) for scores in asset_scores]
    }
    return jsonify(chart_data)

if __name__ == '__main__':
    app.run(debug=True)



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <title>Ecodamus Insights</title>
    <style>
        /* Barclays Colors */
        body { background-color: #f4f4f4; }
        .barclays-blue { color: #00aeef; }
        .barclays-dark-blue { background-color: #00395d; }
        .barclays-light-gray { background-color: #f4f4f4; }

        /* Animations */
        .animate-slide-in {
            animation: slide-in 1.5s ease-out forwards;
        }
        @keyframes slide-in {
            from {
                transform: translateY(-50px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        .animate-bounce {
            animation: bounce 2s infinite;
        }
        @keyframes bounce {
            0%, 100% {
                transform: translateY(0);
            }
            50% {
                transform: translateY(-10px);
            }
        }

        /* Confetti Animation */
        #confetti {
            pointer-events: none;
        }

        /* Chart Container Styles */
        .chart-container {
            max-width: 500px;
            margin: auto;
        }

        /* Enhanced Styles */
        .insight-card {
            background-color: #e0f7fa;
            border: 1px solid #00aeef;
        }

        .rounded-hero {
            border-radius: 20px;
        }
    </style>
</head>
<body class="min-h-screen bg-gradient-to-br from-gray-100 to-gray-300 p-6">
    <!-- Hero Section -->
    <div class="hero-section relative bg-barclays-dark-blue text-white p-8 rounded-lg shadow-lg mb-8 rounded-hero">
        <div id="confetti" class="absolute inset-0"></div>
        <div class="container mx-auto text-center relative z-10">
            <h1 class="text-4xl font-bold mb-4 animate-slide-in">üéâ Congratulations to our Winner!</h1>
            <img id="winner-photo" src="static/winner.jpg" alt="Winner Photo"
                class="w-32 h-32 mx-auto rounded-full shadow-md border-4 border-white animate-bounce">
            <h2 id="winner-name" class="text-3xl font-bold mt-4"></h2>
            <p id="winner-reasoning" class="text-lg italic mt-2"></p>
        </div>
    </div>

    <!-- Key Insights Section -->
    <div class="mt-8">
        <h2 class="text-2xl font-bold barclays-blue mb-4">üèÜ Key Insights</h2>
        <div id="key-insights" class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div class="insight-card p-4 rounded-md shadow-md">
                <h3 class="text-lg font-semibold">Best Performing Player</h3>
                <p id="best-performing-player"></p>
            </div>
            <div class="insight-card p-4 rounded-md shadow-md">
                <h3 class="text-lg font-semibold">Highest Scorer Across Asset Classes</h3>
                <p id="highest-scorer-asset"></p>
            </div>
        </div>
    </div>

    <!-- Player Comparison Section -->
    <h2 class="text-2xl font-bold barclays-blue mt-8 mb-4">‚öñÔ∏è Compare Players</h2>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
            <label for="player1" class="block text-lg font-semibold barclays-blue">Select Player 1:</label>
            <select id="player1" class="w-full p-2 border-2 border-barclays-blue rounded-md">
                <!-- Options populated dynamically -->
            </select>
        </div>
        <div>
            <label for="player2" class="block text-lg font-semibold barclays-blue">Select Player 2:</label>
            <select id="player2" class="w-full p-2 border-2 border-barclays-blue rounded-md">
                <!-- Options populated dynamically -->
            </select>
        </div>
    </div>
    <div class="mt-4 chart-container">
        <canvas id="playerComparisonChart"></canvas>
    </div>

    <!-- Leaderboard Section -->
    <h2 class="text-2xl font-bold barclays-blue mt-8 mb-4">üèÖ Leaderboard</h2>
    <div class="mb-4">
        <input type="text" id="search" placeholder="Search by name..." 
               class="w-full p-2 border-2 border-barclays-blue rounded-md">
    </div>
    <table class="w-full text-left border-collapse table-auto">
        <thead class="bg-barclays-dark-blue text-white">
            <tr>
                <th class="px-4 py-2">Rank</th>
                <th class="px-4 py-2">Name</th>
                <th class="px-4 py-2">Total Score</th>
            </tr>
        </thead>
        <tbody id="leaderboard"></tbody>
    </table>

    <!-- Visualizations Section -->
    <h2 class="text-2xl font-bold barclays-blue mt-8 mb-4">üìà Visualizations</h2>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div class="chart-container">
            <h3 class="text-lg font-semibold text-center">Top 10 Players</h3>
            <canvas id="leaderboardChart"></canvas>
        </div>
        <div class="chart-container">
            <h3 class="text-lg font-semibold text-center">Average Asset Scores</h3>
            <canvas id="assetChart"></canvas>
        </div>
    </div>

    <!-- JavaScript -->
    <script>
        async function fetchInsights() {
            const response = await fetch("/api/insights");
            const data = await response.json();

            // Populate Key Insights
            document.getElementById("best-performing-player").innerText = `${data.best_performing_player.name} (Average: ${data.best_performing_player.average.toFixed(2)})`;
            document.getElementById("highest-scorer-asset").innerText = `${data.highest_scorer_asset.name} (${data.highest_scorer_asset.score} across assets)`;
        }

        async function fetchPlayers() {
            const response = await fetch("/api/leaderboard");
            const players = await response.json();

            // Populate dropdowns
            const player1Select = document.getElementById("player1");
            const player2Select = document.getElementById("player2");
            players.forEach(player => {
                const option1 = document.createElement("option");
                option1.value = player.name;
                option1.textContent = player.name;
                player1Select.appendChild(option1);

                const option2 = document.createElement("option");
                option2.value = player.name;
                option2.textContent = player.name;
                player2Select.appendChild(option2);
            });
        }

        async function comparePlayers() {
            const player1 = document.getElementById("player1").value;
            const player2 = document.getElementById("player2").value;

            if (!player1 || !player2) return;

            const response = await fetch(`/api/compare?player1=${player1}&player2=${player2}`);
            const comparisonData = await response.json();

            // Create comparison spider chart
            new Chart(document.getElementById("playerComparisonChart"), {
                type: "radar",
                data: {
                    labels: comparisonData.assets,
                    datasets: [
                        {
                            label: player1,
                            data: comparisonData.player1_scores,
                            borderColor: "#00aeef",
                            backgroundColor: "rgba(0, 174, 239, 0.4)",
                            pointBackgroundColor: "#00aeef",
                        },
                        {
                            label: player2,
                            data: comparisonData.player2_scores,
                            borderColor: "#00395d",
                            backgroundColor: "rgba(0, 57, 93, 0.4)",
                            pointBackgroundColor: "#00395d",
                        },
                    ],
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        r: {
                            angleLines: {
                                color: "#ccc",
                            },
                            suggestedMin: 0,
                            suggestedMax: 100,
                        },
                    },
                    plugins: {
                        legend: {
                            position: "top",
                        },
                    },
                },
            });
        }

        async function fetchLeaderboard(query = "") {
            const response = await fetch("/api/leaderboard");
            const data = await response.json();
            const filteredData = query
                ? data.filter(player => player.name.toLowerCase().includes(query.toLowerCase()))
                : data;

            const leaderboardBody = document.getElementById("leaderboard");
            leaderboardBody.innerHTML = filteredData.slice(0, 10).map(player => `
                <tr class="border-b">
                    <td class="px-4 py-2">${player.rank}</td>
                    <td class="px-4 py-2">${player.name}</td>
                    <td class="px-4 py-2">${player.total_score}</td>
                </tr>
            `).join('');
        }

        async function fetchChartData() {
            const response = await fetch("/api/chart-data");
            const data = await response.json();

            // Top 10 Players Chart
            new Chart(document.getElementById("leaderboardChart"), {
                type: 'bar',
                data: {
                    labels: data.top_10_names,
                    datasets: [{
                        label: 'Total Score',
                        data: data.top_10_scores,
                        backgroundColor: '#00aeef'
                    }]
                }
            });

            // Average Asset Scores Chart
            new Chart(document.getElementById("assetChart"), {
                type: 'line',
                data: {
                    labels: data.assets,
                    datasets: [{
                        label: 'Average Score',
                        data: data.asset_averages,
                        borderColor: '#00395d',
                        fill: false
                    }]
                }
            });
        }

        // Fetch data on page load
        document.getElementById("search").addEventListener("input", event => {
            fetchLeaderboard(event.target.value);
        });

        fetchInsights();
        fetchPlayers();
        fetchLeaderboard();
        fetchChartData();
        document.getElementById("player1").addEventListener("change", comparePlayers);
        document.getElementById("player2").addEventListener("change", comparePlayers);

        // Confetti Animation
        function generateConfetti() {
            const confettiContainer = document.getElementById('confetti');
            for (let i = 0; i < 50; i++) { // Reduced number of confetti elements for performance optimization
                const confetti = document.createElement('div');
                confetti.style.position = 'absolute';
                confetti.style.width = '10px';
                confetti.style.height = '10px';
                confetti.style.backgroundColor = `hsl(${Math.random() * 360}, 100%, 50%)`;
                confetti.style.left = `${Math.random() * 100}%`;
                confetti.style.top = `${Math.random() * 100}%`;
                confetti.style.animation = `fall ${3 + Math.random() * 2}s ease-out forwards`;
                confetti.style.opacity = 0;
                confetti.style.animationDelay = `${Math.random()}s`;
                confettiContainer.appendChild(confetti);

                setTimeout(() => confetti.remove(), 5000);
            }
        }

        generateConfetti();
    </script>
</body>
</html>