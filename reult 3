<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ecodamus Game Analysis</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        /* Add smooth transition for all elements */
        * {
            transition: all 0.3s ease;
        }
    </style>
</head>
<body class="bg-gray-100">

    <!-- Navigation Bar -->
    <nav class="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-6 shadow-lg">
        <div class="max-w-screen-xl mx-auto flex justify-between items-center">
            <div class="text-3xl font-bold">Ecodamus Game Analysis</div>
            <div class="space-x-4">
                <a href="#topPlayers" class="hover:text-yellow-300">Top 5 Players</a>
                <a href="#performanceComparison" class="hover:text-yellow-300">Player Comparison</a>
                <a href="#assetImpact" class="hover:text-yellow-300">Asset Impact</a>
                <a href="#scoreDistribution" class="hover:text-yellow-300">Score Distribution</a>
                <a href="#scoreStats" class="hover:text-yellow-300">Statistics</a>
                <a href="#correlation" class="hover:text-yellow-300">Correlation</a>
            </div>
        </div>
    </nav>

    <!-- Celebration and Winner Section -->
    <section class="text-center py-10 bg-gradient-to-r from-green-400 to-blue-500">
        <h2 class="text-4xl font-semibold text-white">Congratulations to the Winner!</h2>
        <div id="celebrationAnimation" class="w-full h-72 flex justify-center items-center bg-yellow-300 mt-6 rounded-xl">
            <img src="{{ winner_image_url }}" alt="Winner" class="mx-auto rounded-full w-40 h-40 border-4 border-white shadow-lg">
            <div id="celebrationText" class="absolute text-4xl text-white animate-pulse">ðŸŽ‰ ðŸŽ‰ ðŸŽ‰</div>
        </div>
    </section>

    <!-- Main Content Section -->
    <div class="container mx-auto px-6 py-8">

        <!-- Top 5 Players by Total Score -->
        <section id="topPlayers" class="mb-16">
            <h2 class="text-3xl font-semibold mb-4">Top 5 Players by Total Score</h2>
            <p class="text-lg mb-4 text-gray-700">This section shows the top 5 players who have earned the highest total scores across all asset classes.</p>
            <div id="topPlayersTable" class="bg-white p-6 rounded-lg shadow-md"></div>
        </section>

        <!-- Player Performance Comparison -->
        <section id="performanceComparison" class="mb-16">
            <h2 class="text-3xl font-semibold mb-4">Player Performance Comparison</h2>
            <p class="text-lg mb-4 text-gray-700">Here, you can compare the performance of two players across different asset classes using a radar chart.</p>
            <div class="flex justify-center mb-4 space-x-4">
                <select id="player1" class="p-3 border rounded-lg shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="">Select Player 1</option>
                </select>
                <select id="player2" class="p-3 border rounded-lg shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="">Select Player 2</option>
                </select>
            </div>
            <canvas id="comparisonRadarChart"></canvas>
        </section>

        <!-- Asset Impact Analysis -->
        <section id="assetImpact" class="mb-16">
            <h2 class="text-3xl font-semibold mb-4">Top Asset Classes and Impact</h2>
            <p class="text-lg mb-4 text-gray-700">This section illustrates how different asset classes have impacted the total scores of all players.</p>
            <canvas id="assetImpactChart"></canvas>
        </section>

        <!-- Score Distribution -->
        <section id="scoreDistribution" class="mb-16">
            <h2 class="text-3xl font-semibold mb-4">Score Distribution</h2>
            <p class="text-lg mb-4 text-gray-700">This chart visualizes the distribution of scores among all players.</p>
            <canvas id="scoreDistributionChart"></canvas>
        </section>

        <!-- Median, Mean, and Standard Deviation -->
        <section id="scoreStats" class="mb-16">
            <h2 class="text-3xl font-semibold mb-4">Median, Mean, and Standard Deviation</h2>
            <p class="text-lg mb-4 text-gray-700">In this section, you can see statistical insights such as the median, mean, and standard deviation of players' total scores.</p>
            <div id="scoreStats" class="bg-white p-6 rounded-lg shadow-md"></div>
        </section>

        <!-- Asset Class Correlation -->
        <section id="correlation" class="mb-16">
            <h2 class="text-3xl font-semibold mb-4">Asset Class Correlation</h2>
            <p class="text-lg mb-4 text-gray-700">This scatter plot visualizes the correlation between different asset classes and players' total scores.</p>
            <canvas id="assetClassCorrelationChart"></canvas>
        </section>

    </div>

    <script>
        // Fetch data using AJAX
        fetch('/api/data')
            .then(response => response.json())
            .then(data => {
                const assetClasses = data.assetClasses;
                const playerScores = data.playerScores;
                const playerNames = playerScores.map(player => player['Name']);

                // Populate player selection dropdowns
                const player1Select = document.getElementById('player1');
                const player2Select = document.getElementById('player2');
                playerNames.forEach(name => {
                    const option1 = document.createElement('option');
                    option1.value = name;
                    option1.textContent = name;
                    player1Select.appendChild(option1);

                    const option2 = document.createElement('option');
                    option2.value = name;
                    option2.textContent = name;
                    player2Select.appendChild(option2);
                });

                // Prepare datasets for the charts
                let playerPerformanceData = playerScores.map(player => player['Scores']);
                let assetImpactData = assetClasses.map((asset, index) => {
                    return {
                        label: asset,
                        data: playerScores.map(player => player['Scores'][index]),
                        backgroundColor: `rgba(${(index * 50) % 255}, ${(index * 80) % 255}, ${(index * 120) % 255}, 0.6)`,
                        borderColor: `rgba(${(index * 50) % 255}, ${(index * 80) % 255}, ${(index * 120) % 255}, 1)`,
                        borderWidth: 1
                    };
                });

                // Median, Mean, and Standard Deviation Calculation
                const totalScores = playerScores.map(player => player['TotalScore']);
                const meanScore = totalScores.reduce((acc, score) => acc + score, 0) / totalScores.length;
                const medianScore = totalScores.sort((a, b) => a - b)[Math.floor(totalScores.length / 2)];
                const stdDevScore = Math.sqrt(totalScores.reduce((acc, score) => acc + Math.pow(score - meanScore, 2), 0) / totalScores.length);

                document.getElementById('scoreStats').innerHTML = `
                    <p><strong>Mean:</strong> ${meanScore.toFixed(2)}</p>
                    <p><strong>Median:</strong> ${medianScore}</p>
                    <p><strong>Standard Deviation:</strong> ${stdDevScore.toFixed(2)}</p>
                `;

                // Top 5 Players by Total Score
                const topPlayers = playerScores
                    .sort((a, b) => b['TotalScore'] - a['TotalScore'])
                    .slice(0, 5);
                const topPlayersTable = document.getElementById('topPlayersTable');
                topPlayersTable.innerHTML = `
                    <table class="w-full table-auto border-collapse">
                        <thead>
                            <tr>
                                <th class="border p-2">Rank</th>
                                <th class="border p-2">Name</th>
                                <th class="border p-2">Total Score</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${topPlayers.map((player, index) => `
                                <tr>
                                    <td class="border p-2">${index + 1}</td>
                                    <td class="border p-2">${player['Name']}</td>
                                    <td class="border p-2">${player['TotalScore']}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                `;

                // Player Performance Comparison Radar Chart
                const comparisonRadarChart = new Chart(document.getElementById('comparisonRadarChart'), {
                    type: 'radar',
                    data: {
                        labels: assetClasses,
                        datasets: [{
                            label: playerNames[0], 
                            data: playerScores[0]['Scores'],
                            backgroundColor: 'rgba(0, 123, 255, 0.3)',
                            borderColor: 'rgba(0, 123, 255, 1)',
                            borderWidth: 1
                        }, {
                            label: playerNames[1], 
                            data: playerScores[1]['Scores'],
                            backgroundColor: 'rgba(255, 193, 7, 0.3)',
                            borderColor: 'rgba(255, 193, 7, 1)',
                            borderWidth: 1
                        }]
                    }
                });

                // Asset Impact Bar Chart
                new Chart(document.getElementById('assetImpactChart'), {
                    type: 'bar',
                    data: {
                        labels: assetClasses,
                        datasets: assetImpactData
                    }
                });

                // Score Distribution Pie Chart
                new Chart(document.getElementById('scoreDistributionChart'), {
                    type: 'pie',
                    data: {
                        labels: playerNames,
                        datasets: [{
                            data: totalScores,
                            backgroundColor: assetClasses.map((_, index) => 
                                `rgba(${(index * 50) % 255}, ${(index * 80) % 255}, ${(index * 120) % 255}, 0.6)`
                            )
                        }]
                    }
                });

                // Correlation Scatter Plot
                new Chart(document.getElementById('assetClassCorrelationChart'), {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Asset Class Correlation',
                            data: assetClasses.map((asset, index) => ({
                                x: totalScores[index],
                                y: totalScores[(index + 1) % totalScores.length]
                            })),
                            backgroundColor: 'rgba(0, 123, 255, 0.6)',
                            borderColor: 'rgba(0, 123, 255, 1)',
                            borderWidth: 1
                        }]
                    }
                });

                // Animation for Celebration
                setTimeout(() => {
                    document.getElementById('celebrationText').style.opacity = '0';
                }, 5000);
            });
    </script>

</body>
</html>