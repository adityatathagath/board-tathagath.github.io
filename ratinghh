<!-- templates/index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rating Feature</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.6.0/flowbite.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
</head>
<body class="flex items-center justify-center min-h-screen bg-gray-100">
    <div class="p-6 bg-white rounded shadow-lg">
        <h2 class="text-2xl font-semibold mb-4">Rate Our Website</h2>
        <div class="flex items-center space-x-4" id="rating">
            <button class="rating-button" data-value="1">★</button>
            <button class="rating-button" data-value="2">★</button>
            <button class="rating-button" data-value="3">★</button>
            <button class="rating-button" data-value="4">★</button>
            <button class="rating-button" data-value="5">★</button>
        </div>
        <p class="mt-4">Current rating: <span id="rating-value">0</span></p>
        <p>Total ratings: <span id="total-ratings">0</span></p>
        <p>Average rating: <span id="average-rating">0</span></p>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.6.0/flowbite.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const ratingButtons = document.querySelectorAll('.rating-button');
            const ratingValue = document.getElementById('rating-value');
            const totalRatings = document.getElementById('total-ratings');
            const averageRating = document.getElementById('average-rating');

            fetch('/api/rating')
                .then(response => response.json())
                .then(data => {
                    ratingValue.textContent = data.current_rating;
                    totalRatings.textContent = data.total_ratings;
                    averageRating.textContent = data.average_rating.toFixed(2);
                    updateRatingDisplay(data.current_rating);
                });

            ratingButtons.forEach(button => {
                button.addEventListener('click', (e) => {
                    const value = e.target.getAttribute('data-value');
                    fetch('/api/rating', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ rating: value })
                    })
                    .then(response => response.json())
                    .then(data => {
                        ratingValue.textContent = data.current_rating;
                        totalRatings.textContent = data.total_ratings;
                        averageRating.textContent = data.average_rating.toFixed(2);
                        updateRatingDisplay(data.current_rating);
                    });
                });
            });

            function updateRatingDisplay(value) {
                ratingButtons.forEach(button => {
                    if (button.getAttribute('data-value') <= value) {
                        button.classList.add('text-yellow-500');
                    } else {
                        button.classList.remove('text-yellow-500');
                    }
                });
            }
        });
    </script>
</body>
</html>



from flask import Flask, render_template, request, jsonify
import json
import os

app = Flask(__name__)
RATING_FILE = 'ratings.json'

def read_ratings():
    if not os.path.exists(RATING_FILE):
        return []
    with open(RATING_FILE, 'r') as file:
        return json.load(file)

def write_ratings(data):
    with open(RATING_FILE, 'w') as file:
        json.dump(data, file)

def calculate_average(ratings):
    if not ratings:
        return 0
    return sum(ratings) / len(ratings)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/rating', methods=['GET', 'POST'])
def rating():
    ratings = read_ratings()
    
    if request.method == 'GET':
        current_rating = ratings[-1] if ratings else 0
        average_rating = calculate_average(ratings)
        total_ratings = len(ratings)
        return jsonify({
            'current_rating': current_rating,
            'average_rating': average_rating,
            'total_ratings': total_ratings
        })
    
    if request.method == 'POST':
        new_rating = request.json.get('rating')
        if not new_rating:
            return jsonify({"error": "Invalid rating value"}), 400
        
        new_rating = int(new_rating)
        ratings.append(new_rating)
        write_ratings(ratings)
        average_rating = calculate_average(ratings)
        total_ratings = len(ratings)
        return jsonify({
            'current_rating': new_rating,
            'average_rating': average_rating,
            'total_ratings': total_ratings
        })

if __name__ == '__main__':
    app.run(debug=True)