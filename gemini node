const listContainer = document.querySelector('.collapse-list ul');
const selectedIdInput = document.getElementById('selected-id');

function createListItem(macro) {
  const listItem = document.createElement('li');
  listItem.classList.add('list-item');

  const toggle = document.createElement('span');
  toggle.classList.add('list-item-toggle', 'cursor-pointer', 'transition', 'duration-200', 'ease-in-out');
  toggle.textContent = '>';
  toggle.addEventListener('click', () => toggleListItem(listItem));
  listItem.appendChild(toggle);

  const content = document.createElement('span');
  content.classList.add('list-item-content', 'cursor-pointer', 'hover:text-gray-600');
  content.textContent = macro.name;
  content.addEventListener('click', () => updateSelectedId(macro.id));
  listItem.appendChild(content);

  const listBody = document.createElement('div');
  listBody.classList.add('list-body', 'hidden');

  // Only show list body initially for level 3 items
  listBody.classList.toggle('hidden', macro.level !== 3);

  // Filter child data from yourJsonData based on current macro ID
  const childMacros = yourJsonData.filter(child => child.id.toString().startsWith(macro.id.toString()) && child.level === macro.level + 1);
  for (const childMacro of childMacros) {
    listBody.appendChild(createListItem(childMacro));
  }

  listItem.appendChild(listBody);

  return listItem;
}

function toggleListItem(listItem) {
  const listBody = listItem.querySelector('.list-body');
  listBody.classList.toggle('hidden');
  toggle.textContent = listBody.classList.contains('hidden') ? '>' : '^';
}

function updateSelectedId(id) {
  selectedIdInput.value = id;
}

// Replace with your actual JSON data
const yourJsonData = [
  { "name": "Macro", "id": 41253, "level": 3 },
  // ... rest of your JSON data
];

buildList(yourJsonData);