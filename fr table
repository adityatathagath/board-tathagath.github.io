import dash
from dash import html, dcc, Input, Output, State
import sqlite3
import pandas as pd
from datetime import datetime

DB_PATH = "historical_data.db"

# ------------------------------------------------------------------
# 1. Utility & Database Functions
# ------------------------------------------------------------------

def indent_node_name(name, level):
    """
    Indent Node Name based on Node Level.
    Levels below 4 get no indentation.
    Levels 4 and above: each level above 4 adds 4 non-breaking spaces.
    """
    try:
        level_int = int(level)
    except (ValueError, TypeError):
        level_int = 0
    if level_int >= 4:
        num_spaces = (level_int - 4) * 4
        return "&nbsp;" * num_spaces + name
    else:
        return name

def format_number(value):
    """
    Format numeric values so that negative numbers appear in red,
    and positive/zero in black.
    """
    if value is None:
        return ""
    try:
        val = float(value)
        if val < 0:
            return f'<span style="color:red">{val}</span>'
        else:
            return f'<span style="color:black">{val}</span>'
    except (ValueError, TypeError):
        return str(value)

def fetch_data_and_save_to_db(param1, param2, param3, param4):
    """
    Placeholder function to fetch data (e.g. via an API) and insert
    it into both 'Sheet1_data_alloc' and 'Sheet1_data_stand' tables with today's cob_date.
    """
    cob_date = datetime.today().strftime("%Y-%m-%d")
    simulated_data = {
        "Node Name": ["SampleNode"],
        "Node ID": ["Node123"],
        "Node Level": [5],
        "Equities Delta": [100.0],
        "Equities Delta Change": [-5.0],
        "Equities Vega": [200.0],
        "Equities Vega Change": [10.0],
        "Equities Curvature": [300.0],
        "Equities Curvature Change": [-15.0],
        "FX Delta": [110.0],
        "FX Delta Change": [6.0],
        "FX Vega": [210.0],
        "FX Vega Change": [11.0],
        "FX Curvature": [310.0],
        "FX Curvature Change": [16.0],
        "Commodities Delta": [120.0],
        "Commodities Delta Change": [7.0],
        "Commodities Vega": [220.0],
        "Commodities Vega Change": [12.0],
        "Commodities Curvature": [320.0],
        "Commodities Curvature Change": [17.0],
        "IR Delta": [130.0],
        "IR Delta Change": [8.0],
        "IR Vega": [230.0],
        "IR Vega Change": [13.0],
        "IR Curvature": [330.0],
        "IR Curvature Change": [18.0],
        "CSR NS Delta": [99.0],
        "CSR NS Delta Change": [1.0],
        "CSR NS Vega": [101.0],
        "CSR NS Vega Change": [2.0],
        "CSR NS Curvature": [102.0],
        "CSR NS Curvature Change": [3.0],
        "NS JTD": [50.0],
        "NS JTD Change": [5.0],
        "CSR SecNon JTD": [60.0],
        "CSR SecNon JTD Change": [6.0],
        "RRAO": [70.0],
        "RRAO Change": [7.0],
        "Total": [1000.0],
        "Total Change": [50.0],
        "cob_date": [cob_date]
    }
    df = pd.DataFrame(simulated_data)
    conn = sqlite3.connect(DB_PATH)
    df.to_sql("Sheet1_data_alloc", conn, if_exists="append", index=False)
    df.to_sql("Sheet1_data_stand", conn, if_exists="append", index=False)
    conn.close()

def get_distinct_cob_dates(table_name):
    """
    Return a sorted list of distinct COB dates from a given table.
    """
    conn = sqlite3.connect(DB_PATH)
    query = f"SELECT DISTINCT cob_date FROM {table_name} ORDER BY cob_date"
    dates = pd.read_sql(query, conn)["cob_date"].tolist()
    conn.close()
    return dates

def get_data_for_cob_date(cob_date, table_name):
    """
    Return a DataFrame containing all rows from the specified table
    that match the given cob_date.
    """
    conn = sqlite3.connect(DB_PATH)
    query = f"SELECT * FROM {table_name} WHERE cob_date = '{cob_date}'"
    df = pd.read_sql(query, conn)
    conn.close()
    return df

# ------------------------------------------------------------------
# 2. HTML Table Generation with Advanced Styling
# ------------------------------------------------------------------

def generate_html_table(df, table_id):
    """
    Generate an HTML table with a multi-row header, conditional formatting,
    indentation for Node Name based on Node Level, and clickable headers for sorting.
    """
    column_names = [
        "Node Name", "Node ID", "Node Level",
        "Equities Delta", "Equities Delta Change", "Equities Vega", "Equities Vega Change", 
        "Equities Curvature", "Equities Curvature Change",
        "FX Delta", "FX Delta Change", "FX Vega", "FX Vega Change", 
        "FX Curvature", "FX Curvature Change",
        "Commodities Delta", "Commodities Delta Change", "Commodities Vega", "Commodities Vega Change", 
        "Commodities Curvature", "Commodities Curvature Change",
        "IR Delta", "IR Delta Change", "IR Vega", "IR Vega Change", 
        "IR Curvature", "IR Curvature Change",
        "CSR NS Delta", "CSR NS Delta Change", "CSR NS Vega", "CSR NS Vega Change",
        "CSR NS Curvature", "CSR NS Curvature Change",
        "NS JTD", "NS JTD Change",
        "CSR SecNon JTD", "CSR SecNon JTD Change",
        "RRAO", "RRAO Change",
        "Total", "Total Change"
    ]
    
    # Multi-level header with soothing colours and modern styling
    table_header = f"""
    <thead>
      <tr>
        <th rowspan="3" style="background-color:#2E86C1; color:white; padding:12px;">All Figures in (Â£m)</th>
        <th colspan="41" style="background-color:#2E86C1; color:white; padding:12px;">Allocated</th>
      </tr>
      <tr>
        <th rowspan="2" style="background-color:#2980B9; color:white; padding:10px;">Node Name</th>
        <th rowspan="2" style="background-color:#2980B9; color:white; padding:10px;">Node ID</th>
        <th rowspan="2" style="background-color:#2980B9; color:white; padding:10px;">Node Level</th>
        <th colspan="6" style="background-color:#3498DB; color:white; padding:10px;">Equities</th>
        <th colspan="6" style="background-color:#3498DB; color:white; padding:10px;">Foreign Exchange</th>
        <th colspan="6" style="background-color:#3498DB; color:white; padding:10px;">Commodities</th>
        <th colspan="6" style="background-color:#3498DB; color:white; padding:10px;">Interest Rates</th>
        <th colspan="6" style="background-color:#3498DB; color:white; padding:10px;">CSR NS</th>
        <th colspan="2" style="background-color:#34495E; color:white; padding:10px;">Non Sec JTD</th>
        <th colspan="2" style="background-color:#34495E; color:white; padding:10px;">CSR SecNon JTD</th>
        <th colspan="2" style="background-color:#34495E; color:white; padding:10px;">RRAO</th>
        <th colspan="2" style="background-color:#34495E; color:white; padding:10px;">Total</th>
      </tr>
      <tr>
        <th onclick="sortTable('{table_id}', 0)" style="cursor:pointer;">Delta</th>
        <th onclick="sortTable('{table_id}', 1)" style="cursor:pointer;">Chg</th>
        <th onclick="sortTable('{table_id}', 2)" style="cursor:pointer;">Vega</th>
        <th onclick="sortTable('{table_id}', 3)" style="cursor:pointer;">Chg</th>
        <th onclick="sortTable('{table_id}', 4)" style="cursor:pointer;">Curv</th>
        <th onclick="sortTable('{table_id}', 5)" style="cursor:pointer;">Chg</th>

        <th onclick="sortTable('{table_id}', 6)" style="cursor:pointer;">Delta</th>
        <th onclick="sortTable('{table_id}', 7)" style="cursor:pointer;">Chg</th>
        <th onclick="sortTable('{table_id}', 8)" style="cursor:pointer;">Vega</th>
        <th onclick="sortTable('{table_id}', 9)" style="cursor:pointer;">Chg</th>
        <th onclick="sortTable('{table_id}', 10)" style="cursor:pointer;">Curv</th>
        <th onclick="sortTable('{table_id}', 11)" style="cursor:pointer;">Chg</th>

        <th onclick="sortTable('{table_id}', 12)" style="cursor:pointer;">Delta</th>
        <th onclick="sortTable('{table_id}', 13)" style="cursor:pointer;">Chg</th>
        <th onclick="sortTable('{table_id}', 14)" style="cursor:pointer;">Vega</th>
        <th onclick="sortTable('{table_id}', 15)" style="cursor:pointer;">Chg</th>
        <th onclick="sortTable('{table_id}', 16)" style="cursor:pointer;">Curv</th>
        <th onclick="sortTable('{table_id}', 17)" style="cursor:pointer;">Chg</th>

        <th onclick="sortTable('{table_id}', 18)" style="cursor:pointer;">Delta</th>
        <th onclick="sortTable('{table_id}', 19)" style="cursor:pointer;">Chg</th>
        <th onclick="sortTable('{table_id}', 20)" style="cursor:pointer;">Vega</th>
        <th onclick="sortTable('{table_id}', 21)" style="cursor:pointer;">Chg</th>
        <th onclick="sortTable('{table_id}', 22)" style="cursor:pointer;">Curv</th>
        <th onclick="sortTable('{table_id}', 23)" style="cursor:pointer;">Chg</th>

        <th onclick="sortTable('{table_id}', 24)" style="cursor:pointer;">Delta</th>
        <th onclick="sortTable('{table_id}', 25)" style="cursor:pointer;">Chg</th>
        <th onclick="sortTable('{table_id}', 26)" style="cursor:pointer;">Vega</th>
        <th onclick="sortTable('{table_id}', 27)" style="cursor:pointer;">Chg</th>
        <th onclick="sortTable('{table_id}', 28)" style="cursor:pointer;">Curv</th>
        <th onclick="sortTable('{table_id}', 29)" style="cursor:pointer;">Chg</th>

        <th onclick="sortTable('{table_id}', 30)" style="cursor:pointer;">JTD</th>
        <th onclick="sortTable('{table_id}', 31)" style="cursor:pointer;">Chg</th>

        <th onclick="sortTable('{table_id}', 32)" style="cursor:pointer;">SecNon JTD</th>
        <th onclick="sortTable('{table_id}', 33)" style="cursor:pointer;">Chg</th>

        <th onclick="sortTable('{table_id}', 34)" style="cursor:pointer;">RRAO</th>
        <th onclick="sortTable('{table_id}', 35)" style="cursor:pointer;">Chg</th>

        <th onclick="sortTable('{table_id}', 36)" style="cursor:pointer;">Total</th>
        <th onclick="sortTable('{table_id}', 37)" style="cursor:pointer;">Chg</th>
      </tr>
    </thead>
    """

    table_rows = ""
    for _, row in df.iterrows():
        node_level = row.get("Node Level", 0)
        try:
            node_level = int(node_level)
        except (ValueError, TypeError):
            node_level = 0

        # Highlight rows with Node Level == 5 using a soft blue background
        row_style = 'style="background-color:#f9f9f9;"'
        if node_level == 5:
            row_style = 'style="background-color:#e6f7ff;"'

        table_rows += f"<tr {row_style}>"
        for col in column_names:
            val = row.get(col, "")
            if col == "Node Name":
                val_str = indent_node_name(str(val), node_level)
            elif col.endswith("Level"):
                val_str = str(val)
            else:
                val_str = format_number(val)
            table_rows += f"<td style='padding:8px; text-align:center;'>{val_str}</td>"
        table_rows += "</tr>"

    table_html = f"""
    <table id="{table_id}" style="border-collapse: collapse; width: 100%; margin-bottom: 30px; font-family: 'Arial', sans-serif;">
      {table_header}
      <tbody>
        {table_rows}
      </tbody>
    </table>
    """
    return table_html

# ------------------------------------------------------------------
# 3. Dash App Layout & JavaScript for Sorting
# ------------------------------------------------------------------

app = dash.Dash(__name__)

# Preload distinct cob_dates from one table for the dropdown (could combine multiple if needed)
initial_cob_dates = get_distinct_cob_dates("Sheet1_data_alloc")
dropdown_options = [{"label": d, "value": d} for d in initial_cob_dates]

app.layout = html.Div([
    # Global styling for the page
    html.Div([
        html.H2("Advanced Dashboard", style={"fontFamily": "Arial, sans-serif", "color": "#2E4053"}),
        html.P("Generate a report or view existing reports.", style={"fontFamily": "Arial, sans-serif", "color": "#566573"})
    ], style={"textAlign": "center", "padding": "20px", "backgroundColor": "#D6EAF8"}),

    html.Div([
        html.Div([
            html.Label("String Input 1", style={"fontWeight": "bold"}),
            dcc.Input(id="input1", type="text", placeholder="Enter text...", style={"width": "100%", "padding": "8px", "marginBottom": "10px"}),

            html.Label("String Input 2", style={"fontWeight": "bold"}),
            dcc.Input(id="input2", type="text", placeholder="Enter text...", style={"width": "100%", "padding": "8px", "marginBottom": "10px"}),

            html.Label("String Input 3", style={"fontWeight": "bold"}),
            dcc.Input(id="input3", type="text", placeholder="Enter text...", style={"width": "100%", "padding": "8px", "marginBottom": "10px"}),

            html.Label("Integer Input", style={"fontWeight": "bold"}),
            dcc.Input(id="input4", type="number", placeholder="Enter an integer...", style={"width": "100%", "padding": "8px", "marginBottom": "10px"}),

            html.Button("Generate Report", id="generate-button", n_clicks=0, 
                        style={"backgroundColor": "#2E86C1", "color": "white", "padding": "10px 20px", "border": "none", "cursor": "pointer", "fontSize": "16px"}),
            html.Div(id="generate-message", style={"marginTop": "10px", "color": "green", "fontWeight": "bold"})
        ], style={"width": "30%", "display": "inline-block", "verticalAlign": "top", "padding": "20px", "boxShadow": "0px 0px 10px rgba(0,0,0,0.1)", "marginRight": "2%"}),

        html.Div([
            html.Label("Select COB Date to View", style={"fontWeight": "bold"}),
            dcc.Dropdown(id="cob-date-dropdown", options=dropdown_options, value=None, style={"width": "100%", "padding": "8px", "marginBottom": "10px"}),
            html.Button("Show Dashboard", id="show-dashboard-button", n_clicks=0,
                        style={"backgroundColor": "#2E86C1", "color": "white", "padding": "10px 20px", "border": "none", "cursor": "pointer", "fontSize": "16px"})
        ], style={"width": "30%", "display": "inline-block", "verticalAlign": "top", "padding": "20px", "boxShadow": "0px 0px 10px rgba(0,0,0,0.1)"})
    ], style={"width": "90%", "margin": "auto", "marginBottom": "30px"}),

    html.Div(id="dashboard-container", style={"width": "95%", "margin": "auto"}),

    # JavaScript for table sorting
    html.Script("""
function sortTable(tableId, colIndex) {
    var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
    table = document.getElementById(tableId);
    if (!table) return;
    switching = true;
    dir = "asc";
    while (switching) {
        switching = false;
        rows = table.getElementsByTagName("TR");
        for (i = 3; i < (rows.length - 1); i++) {
            shouldSwitch = false;
            x = rows[i].getElementsByTagName("TD")[colIndex];
            y = rows[i + 1].getElementsByTagName("TD")[colIndex];
            if (!x || !y) { continue; }
            var xVal = parseFloat(x.innerText.replace(/[^0-9.-]+/g,""));
            var yVal = parseFloat(y.innerText.replace(/[^0-9.-]+/g,""));
            if (isNaN(xVal) || isNaN(yVal)) {
                xVal = x.innerText.toLowerCase();
                yVal = y.innerText.toLowerCase();
            }
            if (dir === "asc") {
                if (xVal > yVal) {
                    shouldSwitch = true;
                    break;
                }
            } else if (dir === "desc") {
                if (xVal < yVal) {
                    shouldSwitch = true;
                    break;
                }
            }
        }
        if (shouldSwitch) {
            rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
            switching = true;
            switchcount ++;
        } else {
            if (switchcount === 0 && dir === "asc") {
                dir = "desc";
                switching = true;
            }
        }
    }
}
    """)
])

# ------------------------------------------------------------------
# 4. Dash Callbacks
# ------------------------------------------------------------------

@app.callback(
    Output("generate-message", "children"),
    Output("cob-date-dropdown", "options"),
    Input("generate-button", "n_clicks"),
    State("input1", "value"),
    State("input2", "value"),
    State("input3", "value"),
    State("input4", "value")
)
def generate_report(n_clicks, param1, param2, param3, param4):
    if n_clicks > 0:
        fetch_data_and_save_to_db(param1, param2, param3, param4)
        message = "Report generated and data stored in DB!"
        new_dates = get_distinct_cob_dates("Sheet1_data_alloc")
        new_options = [{"label": d, "value": d} for d in new_dates]
        return message, new_options
    return "", dropdown_options

@app.callback(
    Output("dashboard-container", "children"),
    Input("show-dashboard-button", "n_clicks"),
    State("cob-date-dropdown", "value")
)
def show_dashboard(n_clicks, selected_cob):
    if n_clicks > 0 and selected_cob:
        df_alloc = get_data_for_cob_date(selected_cob, "Sheet1_data_alloc")
        df_stand = get_data_for_cob_date(selected_cob, "Sheet1_data_stand")
        if df_alloc.empty and df_stand.empty:
            return html.Div("No data found for the selected COB date.", style={"textAlign": "center", "fontWeight": "bold"})
        table_alloc_html = generate_html_table(df_alloc, table_id="table_alloc")
        table_stand_html = generate_html_table(df_stand, table_id="table_stand")
        return html.Div([
            html.H3(f"Dashboard for COB Date: {selected_cob}", style={"textAlign": "center", "color": "#2E4053"}),
            html.Div(dangerouslySetInnerHTML={"__html": table_alloc_html}),
            html.Div(dangerouslySetInnerHTML={"__html": table_stand_html})
        ])
    return ""

# ------------------------------------------------------------------
# 5. Run the App
# ------------------------------------------------------------------

if __name__ == "__main__":
    app.run_server(debug=True)
