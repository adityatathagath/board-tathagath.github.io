import dash
from dash import html, dcc, Input, Output, State
import dash_bootstrap_components as dbc
import dash_ag_grid as dag
import plotly.express as px
import sqlite3
import pandas as pd

# ---------------------------
# Database & Data Functions
# ---------------------------
DB_PATH = "historical_data.db"

def get_distinct_cob_dates(table_name):
    """Return a sorted list of distinct COB dates from the given table."""
    conn = sqlite3.connect(DB_PATH)
    query = f"SELECT DISTINCT cob_date FROM {table_name} ORDER BY cob_date"
    dates = pd.read_sql(query, conn)["cob_date"].tolist()
    conn.close()
    return dates

def get_data_for_cob_date(cob_date, table_name):
    """Fetch data from the specified table for the given COB date."""
    conn = sqlite3.connect(DB_PATH)
    query = f"SELECT * FROM {table_name} WHERE cob_date = '{cob_date}'"
    df = pd.read_sql(query, conn)
    conn.close()
    return df

def process_data_for_ag_grid(df):
    """
    Process a flat DataFrame into a list of dicts that include a 'dataPath' field.
    The dataPath is computed using a simple stack algorithm based on 'Node Level'.
    """
    rows = df.to_dict("records")
    processed = []
    stack = []
    for row in rows:
        try:
            level = int(row["Node Level"])
        except (ValueError, TypeError):
            level = 0
        node_name = row["Node Name"]
        # Pop from stack until the top has a lower level than the current row.
        while stack and stack[-1][0] >= level:
            stack.pop()
        if stack:
            path = stack[-1][1] + [node_name]
        else:
            path = [node_name]
        row["dataPath"] = path
        stack.append((level, path))
        processed.append(row)
    return processed

def indent_node_name(name, level):
    """
    Prepend non‑breaking spaces to Node Name based on Node Level.
    For example, if Node Level is 3 then 4 spaces; level 4 → 8; level 5 → 12; etc.
    """
    try:
        level_int = int(level)
    except (ValueError, TypeError):
        level_int = 0
    if level_int >= 3:
        indent_count = (level_int - 2) * 4
        return "&nbsp;" * indent_count + name
    return name

# ---------------------------
# Preload Dropdown Options
# ---------------------------
initial_dates = get_distinct_cob_dates("Sheet1_data_alloc")
dropdown_options = [{"label": d, "value": d} for d in initial_dates]

# ---------------------------
# Initialize Dash App with Bootstrap
# ---------------------------
external_stylesheets = [dbc.themes.FLATLY]
app = dash.Dash(__name__, external_stylesheets=external_stylesheets)

# ---------------------------
# Layout Components
# ---------------------------
# Navbar with theme toggle on the right.
navbar = dbc.Navbar(
    dbc.Container([
        dbc.NavbarBrand("Modern Dashboard", className="ms-2"),
        dbc.Nav(
            [dbc.NavItem(dbc.NavLink("Home", href="#"))],
            className="me-auto", navbar=True
        ),
        html.Div(
            dcc.RadioItems(
                id="theme-selector",
                options=[
                    {"label": "Light Mode", "value": "light"},
                    {"label": "Dark Mode", "value": "dark"}
                ],
                value="light",
                inline=True,
                labelStyle={'margin-right': '10px'}
            ),
            className="ms-auto"
        )
    ]),
    color="primary",
    dark=True,
    sticky="top"
)

# Main body: dropdown to select COB date and a button.
body = dbc.Container([
    dbc.Row(
        dbc.Col(
            dbc.Card([
                dbc.CardBody([
                    dbc.Row([
                        dbc.Col([
                            dbc.Label("Select COB Date:", className="fw-bold"),
                            dcc.Dropdown(id="cob-dropdown", options=dropdown_options, placeholder="Select a COB date")
                        ], width=6)
                    ]),
                    dbc.Row(
                        dbc.Col(
                            dbc.Button("Show Dashboard", id="show-button", color="primary", className="mt-3"),
                            width={"size": 2, "offset": 5}
                        )
                    )
                ])
            ], className="my-4")
        )
    ),
    dbc.Row(
        dbc.Col(
            html.Div(id="dashboard-container")
        )
    )
], fluid=True)

# Final layout: navbar at top, then body.
app.layout = html.Div([navbar, body])

# ---------------------------
# Callback: Update Dashboard
# ---------------------------
@app.callback(
    Output("dashboard-container", "children"),
    [Input("show-button", "n_clicks")],
    [State("cob-dropdown", "value"),
     State("theme-selector", "value")]
)
def update_dashboard(n_clicks, selected_cob, theme):
    if n_clicks and selected_cob:
        df_alloc = get_data_for_cob_date(selected_cob, "Sheet1_data_alloc")
        df_stand = get_data_for_cob_date(selected_cob, "Sheet1_data_stand")
        
        if df_alloc.empty and df_stand.empty:
            return dbc.Alert("No data found for the selected COB date.", color="warning", className="text-center")
        
        # Update the "Node Name" column with indentation.
        def indent_row(row):
            try:
                level = int(row["Node Level"])
            except (ValueError, TypeError):
                level = 0
            if level >= 3:
                indent_count = (level - 2) * 4
                return "&nbsp;" * indent_count + row["Node Name"]
            return row["Node Name"]
        
        if not df_alloc.empty:
            df_alloc["Node Name"] = df_alloc.apply(indent_row, axis=1)
        if not df_stand.empty:
            df_stand["Node Name"] = df_stand.apply(indent_row, axis=1)
        
        # Process data for hierarchical grid display.
        processed_alloc = process_data_for_ag_grid(df_alloc)
        processed_stand = process_data_for_ag_grid(df_stand)
        
        # Define column definitions.
        column_defs = [
            {"field": "Node Name", "headerName": "Node Name", "cellRenderer": "agGroupCellRenderer"},
            {"field": "Node ID", "headerName": "Node ID"},
            {"field": "Node Level", "headerName": "Node Level"},
            {"field": "Equities Delta", "headerName": "Equities Delta"},
            {"field": "Equities Delta Change", "headerName": "Equities Delta Change"},
            {"field": "Equities Vega", "headerName": "Equities Vega"},
            {"field": "Equities Vega Change", "headerName": "Equities Vega Change"},
            {"field": "Equities Curvature", "headerName": "Equities Curvature"},
            {"field": "Equities Curvature Change", "headerName": "Equities Curvature Change"},
            {"field": "FX Delta", "headerName": "FX Delta"},
            {"field": "FX Delta Change", "headerName": "FX Delta Change"},
            {"field": "FX Vega", "headerName": "FX Vega"},
            {"field": "FX Vega Change", "headerName": "FX Vega Change"},
            {"field": "FX Curvature", "headerName": "FX Curvature"},
            {"field": "FX Curvature Change", "headerName": "FX Curvature Change"},
            {"field": "Commodities Delta", "headerName": "Commodities Delta"},
            {"field": "Commodities Delta Change", "headerName": "Commodities Delta Change"},
            {"field": "Commodities Vega", "headerName": "Commodities Vega"},
            {"field": "Commodities Vega Change", "headerName": "Commodities Vega Change"},
            {"field": "Commodities Curvature", "headerName": "Commodities Curvature"},
            {"field": "Commodities Curvature Change", "headerName": "Commodities Curvature Change"},
            {"field": "IR Delta", "headerName": "IR Delta"},
            {"field": "IR Delta Change", "headerName": "IR Delta Change"},
            {"field": "IR Vega", "headerName": "IR Vega"},
            {"field": "IR Vega Change", "headerName": "IR Vega Change"},
            {"field": "IR Curvature", "headerName": "IR Curvature"},
            {"field": "IR Curvature Change", "headerName": "IR Curvature Change"},
            {"field": "CSR NS Delta", "headerName": "CSR NS Delta"},
            {"field": "CSR NS Delta Change", "headerName": "CSR NS Delta Change"},
            {"field": "CSR NS Vega", "headerName": "CSR NS Vega"},
            {"field": "CSR NS Vega Change", "headerName": "CSR NS Vega Change"},
            {"field": "CSR NS Curvature", "headerName": "CSR NS Curvature"},
            {"field": "CSR NS Curvature Change", "headerName": "CSR NS Curvature Change"},
            {"field": "NS JTD", "headerName": "NS JTD"},
            {"field": "NS JTD Change", "headerName": "NS JTD Change"},
            {"field": "CSR SecNon JTD", "headerName": "CSR SecNon JTD"},
            {"field": "CSR SecNon JTD Change", "headerName": "CSR SecNon JTD Change"},
            {"field": "RRAO", "headerName": "RRAO"},
            {"field": "RRAO Change", "headerName": "RRAO Change"},
            {"field": "Total", "headerName": "Total"},
            {"field": "Total Change", "headerName": "Total Change"}
        ]
        
        # Create two ag-grid components.
        # Note: We use the property "js_getDataPath" (instead of "getDataPath") inside dashGridOptions.
        grid_alloc = dag.AgGrid(
            id="grid-alloc",
            columnDefs=column_defs,
            rowData=processed_alloc,
            dashGridOptions={
                "enableSorting": True,
                "treeData": True,
                "js_getDataPath": "function(data) { return data.dataPath; }",
                "groupDefaultExpanded": 1
            },
            style={"height": "400px", "width": "100%"}
        )
        
        grid_stand = dag.AgGrid(
            id="grid-stand",
            columnDefs=column_defs,
            rowData=processed_stand,
            dashGridOptions={
                "enableSorting": True,
                "treeData": True,
                "js_getDataPath": "function(data) { return data.dataPath; }",
                "groupDefaultExpanded": 1
            },
            style={"height": "400px", "width": "100%"}
        )
        
        # Create a sunburst chart from df_alloc using Plotly Express.
        fig = px.sunburst(
            df_alloc,
            path=['Node Level', 'Node Name'],
            values='Total',
            title="Sunburst of Total by Node Level and Node Name"
        )
        sunburst_chart = dcc.Graph(figure=fig)
        
        return html.Div([
            html.H4(f"Sheet1_data_alloc for COB Date: {selected_cob}", className="my-3 text-center"),
            grid_alloc,
            html.H4(f"Sheet1_data_stand for COB Date: {selected_cob}", className="my-3 text-center"),
            grid_stand,
            html.H4("Sunburst Visualization", className="my-3 text-center"),
            sunburst_chart
        ])
    return html.Div("Please select a COB date and click 'Show Dashboard'.", className="text-center")

# ---------------------------
# Run the App
# ---------------------------
if __name__ == "__main__":
    app.run_server(debug=True)