import dash
from dash import html, dcc, Input, Output, State
import dash_table
import sqlite3
import pandas as pd

# Initialize Dash app
app = dash.Dash(__name__)

DB_PATH = "historical_data.db"

def get_distinct_cob_dates(table_name):
    """Return a sorted list of distinct cob_date values from the given table."""
    conn = sqlite3.connect(DB_PATH)
    query = f"SELECT DISTINCT cob_date FROM {table_name} ORDER BY cob_date"
    dates = pd.read_sql(query, conn)["cob_date"].tolist()
    conn.close()
    return dates

def get_data_for_cob_date(cob_date, table_name):
    """Fetch and return data from the specified table for the given cob_date."""
    conn = sqlite3.connect(DB_PATH)
    query = f"SELECT * FROM {table_name} WHERE cob_date = '{cob_date}'"
    df = pd.read_sql(query, conn)
    conn.close()
    return df

# Create initial dropdown options from one of the tables.
initial_dates = get_distinct_cob_dates("Sheet1_data_alloc")
dropdown_options = [{"label": d, "value": d} for d in initial_dates]

# Define the layout: a dropdown, a button, and a container for the tables.
app.layout = html.Div([
    html.H2("Dashboard"),
    html.Div([
        dcc.Dropdown(id="cob-dropdown", options=dropdown_options, placeholder="Select a COB date"),
        html.Button("Show Dashboard", id="show-button", n_clicks=0)
    ], style={"width": "50%", "margin": "auto", "padding": "20px"}),
    html.Div(id="dashboard-container", style={"width": "90%", "margin": "auto"})
])

# Callback: When the user selects a COB date and clicks the button,
# fetch the data from both tables and display them as DataTables.
@app.callback(
    Output("dashboard-container", "children"),
    Input("show-button", "n_clicks"),
    State("cob-dropdown", "value")
)
def update_dashboard(n_clicks, selected_cob):
    if n_clicks > 0 and selected_cob:
        # Fetch data for the selected COB date from both tables.
        df_alloc = get_data_for_cob_date(selected_cob, "Sheet1_data_alloc")
        df_stand = get_data_for_cob_date(selected_cob, "Sheet1_data_stand")
        
        # Create DataTables for each table.
        table_alloc = dash_table.DataTable(
            data=df_alloc.to_dict("records"),
            columns=[{"name": col, "id": col} for col in df_alloc.columns],
            sort_action="native",
            style_table={"overflowX": "auto"},
            style_cell={"textAlign": "center", "padding": "5px"},
            style_header={"backgroundColor": "#0074D9", "color": "white", "fontWeight": "bold"}
        )
        
        table_stand = dash_table.DataTable(
            data=df_stand.to_dict("records"),
            columns=[{"name": col, "id": col} for col in df_stand.columns],
            sort_action="native",
            style_table={"overflowX": "auto"},
            style_cell={"textAlign": "center", "padding": "5px"},
            style_header={"backgroundColor": "#0074D9", "color": "white", "fontWeight": "bold"}
        )
        
        return html.Div([
            html.H3(f"Data from Sheet1_data_alloc for COB Date: {selected_cob}"),
            table_alloc,
            html.H3(f"Data from Sheet1_data_stand for COB Date: {selected_cob}", style={"marginTop": "40px"}),
            table_stand
        ])
    return html.Div("Please select a COB date and click 'Show Dashboard'.")

if __name__ == "__main__":
    app.run_server(debug=True)