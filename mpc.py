import streamlit as st
import pandas as pd
import plotly.express as px
from st_aggrid import AgGrid, GridOptionsBuilder

# --- Page Configuration ---
# Set the layout to wide mode for better visualization
st.set_page_config(layout="wide", page_title="Risk & MPC Analysis Dashboard")

# --- MPC Data ---
# Create a DataFrame with the detailed RBI MPC meeting data.
mpc_data = pd.DataFrame([
    {'Date': '2025-06-06', 'Meeting': 'June 2025', 'Repo Rate': '6.50% (Unchanged)', 'Stance': 'Withdrawal of accommodation', 'CPI Forecast (FY)': '4.5% (26)', 'GDP Forecast (FY)': '7.2% (26)'},
    {'Date': '2025-04-04', 'Meeting': 'April 2025', 'Repo Rate': '6.50% (Unchanged)', 'Stance': 'Withdrawal of accommodation', 'CPI Forecast (FY)': '4.5% (26)', 'GDP Forecast (FY)': '7.0% (26)'},
    {'Date': '2025-02-07', 'Meeting': 'February 2025', 'Repo Rate': '6.50% (Unchanged)', 'Stance': 'Withdrawal of accommodation', 'CPI Forecast (FY)': '4.5% (25)', 'GDP Forecast (FY)': '7.0% (25)'},
    {'Date': '2024-12-06', 'Meeting': 'December 2024', 'Repo Rate': '6.50% (Unchanged)', 'Stance': 'Withdrawal of accommodation', 'CPI Forecast (FY)': '4.5% (25)', 'GDP Forecast (FY)': '7.0% (25)'},
    {'Date': '2024-10-09', 'Meeting': 'October 2024', 'Repo Rate': '6.50% (Unchanged)', 'Stance': 'Withdrawal of accommodation', 'CPI Forecast (FY)': '4.5% (25)', 'GDP Forecast (FY)': '7.0% (25)'},
    {'Date': '2024-08-08', 'Meeting': 'August 2024', 'Repo Rate': '6.50% (Unchanged)', 'Stance': 'Withdrawal of accommodation', 'CPI Forecast (FY)': '4.5% (25)', 'GDP Forecast (FY)': '7.0% (25)'},
    {'Date': '2024-06-07', 'Meeting': 'June 2024', 'Repo Rate': '6.50% (Unchanged)', 'Stance': 'Withdrawal of accommodation', 'CPI Forecast (FY)': '4.5% (25)', 'GDP Forecast (FY)': '7.2% (25)'},
    {'Date': '2024-04-05', 'Meeting': 'April 2024', 'Repo Rate': '6.50% (Unchanged)', 'Stance': 'Withdrawal of accommodation', 'CPI Forecast (FY)': '4.5% (25)', 'GDP Forecast (FY)': '7.0% (25)'},
    {'Date': '2024-02-08', 'Meeting': 'February 2024', 'Repo Rate': '6.50% (Unchanged)', 'Stance': 'Withdrawal of accommodation', 'CPI Forecast (FY)': '5.4% (24)', 'GDP Forecast (FY)': '7.3% (24)'},
    {'Date': '2023-12-08', 'Meeting': 'December 2023', 'Repo Rate': '6.50% (Unchanged)', 'Stance': 'Withdrawal of accommodation', 'CPI Forecast (FY)': '5.4% (24)', 'GDP Forecast (FY)': '7.0% (24)'},
    {'Date': '2023-10-06', 'Meeting': 'October 2023', 'Repo Rate': '6.50% (Unchanged)', 'Stance': 'Withdrawal of accommodation', 'CPI Forecast (FY)': '5.4% (24)', 'GDP Forecast (FY)': '6.5% (24)'},
    {'Date': '2023-08-10', 'Meeting': 'August 2023', 'Repo Rate': '6.50% (Unchanged)', 'Stance': 'Withdrawal of accommodation', 'CPI Forecast (FY)': '5.4% (24)', 'GDP Forecast (FY)': '6.5% (24)'},
    {'Date': '2023-06-08', 'Meeting': 'June 2023', 'Repo Rate': '6.50% (Unchanged)', 'Stance': 'Withdrawal of accommodation', 'CPI Forecast (FY)': '5.1% (24)', 'GDP Forecast (FY)': '6.5% (24)'},
    {'Date': '2023-04-06', 'Meeting': 'April 2023', 'Repo Rate': '6.50% (Unchanged)', 'Stance': 'Withdrawal of accommodation', 'CPI Forecast (FY)': '5.2% (24)', 'GDP Forecast (FY)': '6.5% (24)'},
    {'Date': '2023-02-08', 'Meeting': 'February 2023', 'Repo Rate': '6.50% (+25bps)', 'Stance': 'Withdrawal of accommodation', 'CPI Forecast (FY)': '6.5% (23)', 'GDP Forecast (FY)': '7.0% (23)'},
])
mpc_data['Date'] = pd.to_datetime(mpc_data['Date'])


# --- Main Application Logic ---
st.title("ðŸ“ˆ Financial Risk & MPC Analysis Dashboard")
st.markdown("Upload your `consolidated_risk_timeseries.xlsx` file to begin analysis.")

uploaded_file = st.file_uploader("Choose a file", type="xlsx")

if uploaded_file is None:
    st.info("Please upload the consolidated Excel file generated by the Python script.")
    st.stop()

# --- Data Loading and Caching ---
# Cache the data loading to improve performance on subsequent runs
@st.cache_data
def load_data(file):
    df = pd.read_excel(file, engine='openpyxl')
    df['Date'] = pd.to_datetime(df['Date'])
    return df

try:
    df = load_data(uploaded_file)
except Exception as e:
    st.error(f"An error occurred while reading the file: {e}")
    st.stop()


# --- Sidebar for Filters ---
st.sidebar.header("ðŸ“Š Dashboard Filters")

# Get unique values for filters and sort them
metrics = sorted(df['Metric'].unique())
asset_classes = sorted(df['Asset Class'].unique())
tenor_order = ['<=1Y', '2Y', '3Y', '4Y', '5Y', '7Y', '10Y', '>=15Y']
tenors = sorted(df['Tenor'].unique(), key=lambda x: tenor_order.index(x) if x in tenor_order else len(tenor_order))

# Create select boxes in the sidebar
selected_metric = st.sidebar.selectbox("Select Metric", metrics, index=0)
selected_asset_class = st.sidebar.selectbox("Select Asset Class", asset_classes, index=0)
selected_tenor = st.sidebar.selectbox("Select Tenor", tenors, index=0)


# --- Data Filtering ---
# Filter the DataFrame based on user selections
filtered_df = df[
    (df['Metric'] == selected_metric) &
    (df['Asset Class'] == selected_asset_class) &
    (df['Tenor'] == selected_tenor)
]


# --- Main Chart Visualization ---
st.header(f"Time Series for: {selected_asset_class} | {selected_tenor} | {selected_metric}")

if filtered_df.empty:
    st.warning("No data available for the selected filter combination.")
else:
    # Create an interactive Plotly chart
    fig = px.line(
        filtered_df,
        x='Date',
        y='Value',
        title=f"{selected_metric} for {selected_asset_class} ({selected_tenor})",
        labels={'Value': f'{selected_metric} Value (Â£k)', 'Date': 'Date'},
        template='plotly_dark' # Use a dark theme for the chart
    )

    # Add vertical lines for each MPC meeting date
    for index, row in mpc_data.iterrows():
        fig.add_vline(
            x=row['Date'],
            line_width=1,
            line_dash="dash",
            line_color="orange",
            annotation_text=row['Meeting'],
            annotation_position="top left",
            annotation_font_size=10,
            annotation_font_color="orange"
        )
    
    # Update layout for better readability
    fig.update_layout(
        title_font_size=24,
        xaxis_title_font_size=16,
        yaxis_title_font_size=16,
        legend_title_text=None
    )
    
    # Display the chart, using the full container width
    st.plotly_chart(fig, use_container_width=True)


# --- Display MPC and Raw Data ---
col1, col2 = st.columns([1, 2])

with col1:
    st.subheader("Key RBI MPC Decisions")
    st.dataframe(mpc_data.set_index('Meeting'))

with col2:
    st.subheader("Raw Data Explorer")
    
    # Configure AG Grid options for interactivity
    gb = GridOptionsBuilder.from_dataframe(df)
    gb.configure_pagination(paginationAutoPageSize=True)
    gb.configure_side_bar()
    gb.configure_default_column(groupable=True, value=True, enableRowGroup=True, aggFunc='sum', editable=False)
    gridOptions = gb.build()

    # Display the interactive grid
    AgGrid(
        df,
        gridOptions=gridOptions,
        theme='alpine-dark', # Use a standard dark theme that is more compatible
        height=400,
        width='100%',
        fit_columns_on_grid_load=True,
        allow_unsafe_jscode=True, # Set to True to allow jsfunction to be injected
    )
