import os
import time
import logging
import xlwings as xw
import pandas as pd
import pythoncom
import multiprocessing as mp
from concurrent.futures import ProcessPoolExecutor, as_completed

# ─── 1) CONFIGURATION ────────────────────────────────────────────────────
XLL_PATH    = r"C:\Path\To\IceAddIn.xll"
OUTPUT_DIR  = r"C:\Data\IceReports"
REPORT_PARAMS = [
    (20489527, 1, "INR_DailyRates"),
    (20489527, 2, "INR_DailyRates_T2"),
    (20486527, 1, "BRL_CreditSpreads"),
    # … add all your (report_id, lag, name) tuples …
]
MAX_WORKERS = 4
LOG_FILE    = "ice_report_fetch.log"

# ─── 2) LOGGER SETUP ─────────────────────────────────────────────────────
def setup_logging():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s %(levelname)-8s %(message)s",
        handlers=[
            logging.FileHandler(LOG_FILE, mode="a"),
            logging.StreamHandler()
        ]
    )
    logging.info(f"Output directory: {OUTPUT_DIR}")

# ─── 3) WORKER ────────────────────────────────────────────────────────────
def fetch_report(params):
    # Initialize COM for this process
    pythoncom.CoInitialize()
    try:
        report_id, lag, name = params
        out_csv = os.path.join(OUTPUT_DIR, f"{name}.csv")
        logging.info(f"[PID {os.getpid()}] Starting '{name}' (ID={report_id}, lag={lag})")

        # Launch invisible Excel
        app = xw.App(visible=False, add_book=False)
        try:
            app.api.RegisterXLL(XLL_PATH)
            arr = app.api.Run("Ice_Report_Legacy", report_id, "", lag)
            data = [list(r) for r in arr]
            headers, *rows = data

            df = pd.DataFrame(rows, columns=headers)
            df.to_csv(out_csv, index=False)
            logging.info(f"[PID {os.getpid()}] Saved {len(df)} rows → {out_csv}")
        finally:
            app.kill()

    except Exception as e:
        logging.error(f"[PID {os.getpid()}] Error in '{name}': {e}")
    finally:
        pythoncom.CoUninitialize()

# ─── 4) MAIN ──────────────────────────────────────────────────────────────
def main():
    # Ensure we use spawn so each child starts fresh
    mp.set_start_method('spawn', force=True)
    setup_logging()

    with ProcessPoolExecutor(max_workers=MAX_WORKERS) as executor:
        futures = {executor.submit(fetch_report, p): p for p in REPORT_PARAMS}
        for future in as_completed(futures):
            # this will re-raise any exception inside fetch_report
            future.result()

if __name__ == "__main__":
    main()