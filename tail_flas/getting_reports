# app.py
import pythoncom
import logging
import time

import pandas as pd
import win32com.client
import streamlit as st
from streamlit_autorefresh import st_autorefresh

# â€”â€” CONFIGURATION â€”â€”
# Set this to the ProgID you discovered from discovery.py
ICE_PROGID     = "ICE.ExcelAddin64"
REPORT_METHOD = "Ice_Report_Legacy"  # usually matches your UDF name

# Map friendly names to report IDs
REPORTS = {
    "Daily P&L":    20384820,
    "Risk Summary": 20384821,
    # â€¦ all your other 18 reportâ€‘name: reportâ€‘id pairs â€¦
}

# Log file for postâ€‘mortem
LOG_FILE = "dashboard.log"

# â€”â€” LOGGING SETUP â€”â€”
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s"
)

def fetch_report_via_com(report_id: int, param: str = "") -> pd.DataFrame:
    """
    Starts Excel, grabs ICE via COMAddIns, calls Ice_Report_Legacy(report_id, None, param),
    and returns a pandas DataFrame. On any error, logs and returns an empty DataFrame.
    """
    pythoncom.CoInitialize()
    xl = win32com.client.DispatchEx("Excel.Application")
    xl.Visible = False
    xl.DisplayAlerts = False

    try:
        # 1) Locate the COMAddIn
        addin = None
        for i in range(1, xl.COMAddIns.Count + 1):
            ai = xl.COMAddIns.Item(i)
            if ai.ProgId == ICE_PROGID:
                addin = ai
                break
        if addin is None:
            raise RuntimeError(f"ICE add-in {ICE_PROGID} not found")

        ice_obj = addin.Object

        # 2) Call the method
        raw = getattr(ice_obj, REPORT_METHOD)(report_id, None, param)

        # 3) Convert SafeArray â†’ tuple â†’ DataFrame
        rows = tuple(raw)                  # ((header1, header2, ...), (r1c1, r1c2,...), ...)
        headers, data = rows[0], rows[1:]
        return pd.DataFrame(data, columns=headers)

    except Exception as e:
        logging.exception(f"Error fetching report {report_id}")
        return pd.DataFrame()

    finally:
        # 4) Clean up
        try:
            xl.Quit()
        except Exception:
            pass
        pythoncom.CoUninitialize()

def main():
    st.set_page_config(page_title="ICE Reports Dashboard", layout="wide")
    st.title("ðŸ“Š Live ICE Reports Dashboard")

    # Auto-refresh every 5 minutes
    _ = st_autorefresh(interval=300_000, key="ice_refresh")

    # Shared parameter for the COM call
    param = st.text_input("Parameter for C1", "")

    # Fetch all reports on first load or each refresh
    if "data" not in st.session_state:
        st.session_state.data = {}
    if st.session_state.get("_last_refresh", None) != param:
        st.session_state.data.clear()
        for name, rid in REPORTS.items():
            with st.spinner(f"Loading {name}â€¦"):
                df = fetch_report_via_com(rid, param)
                st.session_state.data[name] = df
        st.session_state._last_refresh = param

    # Display
    for name, df in st.session_state.data.items():
        st.subheader(name)
        if df.empty:
            st.warning(f"No data for **{name}**")
        else:
            st.dataframe(df, use_container_width=True)

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logging.exception("Unhandled exception in Streamlit app")
        st.error(f"ðŸš¨ Unexpected error: {e}")
