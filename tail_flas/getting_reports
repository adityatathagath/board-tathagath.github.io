import os
import time
import logging
import xlwings as xw
import pandas as pd

# ─── CONFIGURATION ────────────────────────────────────────────────────────
# 1) Full path to your Ice_Report_Legacy add‑in XLL
XLL_PATH   = r"C:\Path\To\IceAddIn.xll"

# 2) Directory where CSVs will be written
OUTPUT_DIR = r"C:\Data\IceReports"

# 3) List all (report_id, lag) pairs here:
REPORT_PARAMS = [
    (20486527, 1),
    (20486527, 2),
    # … add your remaining 18 pairs …
]

# 4) Log file name
LOG_FILE = "ice_report_fetch.log"


# ─── LOGGER SETUP ──────────────────────────────────────────────────────────
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE, mode="a"),
        logging.StreamHandler()
    ]
)


# ─── FETCH FUNCTION ───────────────────────────────────────────────────────
def fetch_all():
    # Ensure output directory exists
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    logging.info(f"Output directory: {OUTPUT_DIR}")

    # Launch a brand‑new, invisible Excel instance (no default workbook)
    app = xw.App(visible=False, add_book=False)
    try:
        # Register the XLL so the formula is available
        app.api.RegisterXLL(XLL_PATH)
        logging.info(f"Registered XLL: {XLL_PATH}")

        # Loop through each report
        for report_id, lag in REPORT_PARAMS:
            out_csv = os.path.join(OUTPUT_DIR, f"report_{report_id}_lag{lag}.csv")
            logging.info(f"Fetching report_id={report_id}, lag={lag}")

            # Create a temporary workbook & sheet
            wb  = app.books.add()
            sht = wb.sheets[0]

            try:
                # 1) Write the dynamic‐array formula into A1
                sht.range("A1").formula = f"=Ice_Report_Legacy({report_id},,{lag})"

                # 2) Force a full recalculation
                app.api.CalculateFull()
                time.sleep(1)  # a brief pause for large reports

                # 3) Grab the spilled range starting at A1
                data = sht.range("A1").expand().options(ndim=2).value
                if not data or len(data) < 2:
                    raise ValueError("No data or only headers returned")

                headers, *rows = data

                # 4) Convert to DataFrame and save
                df = pd.DataFrame(rows, columns=headers)
                df.to_csv(out_csv, index=False)
                logging.info(f"Saved {len(df)} rows → {out_csv}")

            except Exception as e:
                logging.error(f"Error fetching {report_id}, lag={lag}: {e}")

            finally:
                # Close the temp workbook without saving
                wb.close(False)

        logging.info("All reports processed.")

    finally:
        # Kill the Excel process
        app.kill()
        logging.info("Excel instance closed.")


# ─── ENTRY POINT ──────────────────────────────────────────────────────────
if __name__ == "__main__":
    fetch_all()
