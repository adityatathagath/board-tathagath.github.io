import os
import logging
import time
import pythoncom

import xlwings as xw
import pandas as pd
import streamlit as st
from streamlit_autorefresh import st_autorefresh

# ‚Äî‚Äî CONFIGURATION ‚Äî‚Äî
ICE_XLL_PATH = r"C:\path\to\ICE.ExcelAddin64.xll"
REPORTS = {
    "Daily P&L":    20384820,
    "Risk Summary": 20384821,
    # ‚Ä¶ add your remaining 18 report-name ‚Üî report-id pairs ‚Ä¶
}
LOG_FILE = "dashboard.log"

# ‚Äî‚Äî LOGGING SETUP ‚Äî‚Äî
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s"
)

# ‚Äî‚Äî LAUNCH & REGISTER EXCEL (CACHED) ‚Äî‚Äî
@st.cache_resource
def get_excel_app():
    """Start Excel once and register the ICE XLL."""
    pythoncom.CoInitialize()
    try:
        app = xw.App(visible=False)
    except Exception as e:
        logging.exception("Could not start Excel")
        st.error(f"‚ö†Ô∏è Excel startup failed: {e}")
        return None

    if not os.path.isfile(ICE_XLL_PATH):
        st.error(f"‚ö†Ô∏è XLL not found: {ICE_XLL_PATH}")
        app.kill()
        return None
    try:
        ok = app.api.RegisterXLL(ICE_XLL_PATH)
        if not ok:
            raise RuntimeError("RegisterXLL returned False")
    except Exception as e:
        logging.exception("Could not register ICE XLL")
        st.error(f"‚ö†Ô∏è ICE add-in registration failed: {e}")
        app.kill()
        return None

    return app

# ‚Äî‚Äî LOAD ALL REPORTS AT ONCE ‚Äî‚Äî
def load_all_reports(param: str) -> dict:
    """
    Creates one new workbook, renames its default sheet to the first report,
    adds sheets for the rest, writes all array‚Äêformulas, calculates once,
    and reads each spilled range into a DataFrame.
    """
    app = get_excel_app()
    if app is None:
        return {}

    data = {}
    wb = None
    try:
        # 1) New workbook
        wb = app.books.add()

        # 2) Rename default sheet & drop first formula
        report_names = list(REPORTS.keys())
        first_name = report_names[0]
        first_rid  = REPORTS[first_name]

        sht = wb.sheets[0]
        sht.name = first_name
        sht.range("C1").value = param
        sht.range("A1").formula_array = f'=Ice_Report_Legacy({first_rid},,C1)'

        # 3) Add & populate remaining sheets
        for name in report_names[1:]:
            rid = REPORTS[name]
            sht2 = wb.sheets.add(name=name)
            sht2.range("C1").value = param
            sht2.range("A1").formula_array = f'=Ice_Report_Legacy({rid},,C1)'

        # 4) One global calculate
        try:
            app.api.CalculateUntilAsyncQueriesDone()
        except Exception:
            app.calculate()
        time.sleep(2)  # give the XLL time to finish spilling

        # 5) Read each sheet via xlwings‚Äô table‚Äêexpand
        for name in report_names:
            try:
                sheet = wb.sheets[name]
                df = sheet.range("A1").options(
                    pd.DataFrame,
                    header=1,
                    index=False,
                    expand="table"
                ).value
                data[name] = df
            except Exception as e:
                logging.exception(f"Error reading sheet {name}")
                st.error(f"‚ö†Ô∏è Could not read report **{name}**: {e}")
                data[name] = pd.DataFrame()

    except Exception as e:
        logging.exception("Error in load_all_reports")
        st.error(f"üö® Unexpected error fetching reports: {e}")

    finally:
        if wb:
            try:
                wb.close(False)
            except Exception:
                logging.exception("Failed to close workbook")

    return data

# ‚Äî‚Äî STREAMLIT APP ‚Äî‚Äî
def main():
    st.set_page_config(page_title="ICE Reports Dashboard", layout="wide")
    st.title("üìä Live ICE Reports Dashboard")

    # Auto-refresh every 5 minutes
    refresh_count = st_autorefresh(interval=300_000, key="ice_refresh")

    param = st.text_input("Parameter for $C$1", "")

    if "data" not in st.session_state or refresh_count:
        with st.spinner("Fetching all ICE reports‚Ä¶"):
            st.session_state.data = load_all_reports(param)

    for name, df in st.session_state.data.items():
        st.subheader(name)
        if df is None or df.empty:
            st.warning(f"No data for **{name}**")
        else:
            st.dataframe(df, use_container_width=True)

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logging.exception("Unhandled error in Streamlit")
        st.error(f"üí• Fatal error: {e}")
