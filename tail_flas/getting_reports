import os
import logging
import time
import pythoncom
import pandas as pd
import streamlit as st
from streamlit_autorefresh import st_autorefresh
import win32com.client as win32

# ‚Äî‚Äî CONFIGURATION ‚Äî‚Äî
ICE_XLL_PATH = r"C:\path\to\ICE.ExcelAddin64.xll"
REPORTS = {
    "Daily P&L":    20384820,
    "Risk Summary": 20384821,
    # ‚Ä¶ add your other report-name:report-id pairs ‚Ä¶
}
LOG_FILE = "dashboard.log"

# ‚Äî‚Äî LOGGING SETUP ‚Äî‚Äî
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s"
)

def fetch_report(report_id: int, param: str = "") -> pd.DataFrame:
    """
    Uses FormulaArray to call Ice_Report_Legacy(report_id,,"$C$1")
    and returns the result as a pandas DataFrame.
    """
    pythoncom.CoInitialize()
    xl = None
    wb = None
    df = pd.DataFrame()
    try:
        # 1) Launch a fresh Excel COM instance
        xl = win32.DispatchEx("Excel.Application")
        xl.Visible = False
        xl.DisplayAlerts = False

        # 2) Register the XLL
        if not os.path.isfile(ICE_XLL_PATH):
            raise FileNotFoundError(f"XLL not found: {ICE_XLL_PATH}")
        if not xl.RegisterXLL(ICE_XLL_PATH):
            raise RuntimeError(f"Failed to register XLL: {ICE_XLL_PATH}")

        # 3) Add a new workbook & set up parameter cell
        wb = xl.Workbooks.Add()
        ws = wb.Worksheets(1)
        ws.Range("C1").Value = param

        # 4) Enter the array formula in A1
        formula = f'=Ice_Report_Legacy({report_id},, $C$1)'
        ws.Range("A1").FormulaArray = formula

        # 5) Force a calculation
        try:
            xl.CalculateUntilAsyncQueriesDone()
        except AttributeError:
            xl.Calculate()
        time.sleep(1)  # allow time for the add-in to spill the array

        # 6) Read back the spilled range
        used = ws.UsedRange.Value
        if used:
            headers = used[0]
            rows = used[1:]
            df = pd.DataFrame(rows, columns=headers)

    except Exception as e:
        logging.exception(f"Error fetching report {report_id}")
        st.error(f"‚ö†Ô∏è Could not load report {report_id}: {e}")
    finally:
        # 7) Clean up workbook
        if wb:
            try:
                wb.Close(False)
            except Exception:
                logging.exception("Failed to close workbook")
        # 8) Quit Excel
        if xl:
            try:
                xl.Quit()
            except Exception:
                logging.exception("Failed to quit Excel")
        pythoncom.CoUninitialize()

    return df

def main():
    st.set_page_config(page_title="ICE Dashboard", layout="wide")
    st.title("üìä Live ICE Reports Dashboard")

    # Auto‚Äërefresh every 5 minutes
    refresh_count = st_autorefresh(interval=300_000, key="ice_refresh")

    # Shared parameter (goes into $C$1)
    param = st.text_input("Parameter for $C$1", "")

    # On first load or when refresh_count increments, reload all reports
    if "data" not in st.session_state or refresh_count:
        st.session_state.data = {}
        for name, rid in REPORTS.items():
            with st.spinner(f"Loading {name}‚Ä¶"):
                df = fetch_report(rid, param)
                st.session_state.data[name] = df

    # Display each DataFrame
    for name, df in st.session_state.data.items():
        st.subheader(name)
        if df.empty:
            st.warning(f"No data available for **{name}**")
        else:
            st.dataframe(df, use_container_width=True)

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logging.exception("Unhandled exception in Streamlit app")
        st.error(f"üö® Unexpected error: {e}")
