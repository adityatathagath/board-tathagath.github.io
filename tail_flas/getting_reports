import os
import time
import logging
import xlwings as xw
import pandas as pd

# ─── 1) CONFIGURATION ─────────────────────────────────────────────────────
XLL_PATH    = r"C:\Path\To\IceAddIn.xll"
OUTPUT_DIR  = r"C:\Data\IceReports"

# Your list of (report_id, lag)
REPORT_PARAMS = [
    (20489527, 1),
    (20489527, 2),
    # … add all 20 here …
]

LOG_FILE    = "ice_report_fetch.log"

# ─── 2) LOGGER SETUP ───────────────────────────────────────────────────────
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)-8s %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE, mode="a"),
        logging.StreamHandler()
    ]
)

# ─── 3) FETCH VIA Application.Run ─────────────────────────────────────────
def fetch_all_reports():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    logging.info(f"Output → {OUTPUT_DIR}")

    # 1) start a fresh, invisible Excel
    app = xw.App(visible=False, add_book=False)
    try:
        # 2) load your XLL so the function is registered
        app.api.RegisterXLL(XLL_PATH)
        logging.info(f"Registered XLL: {XLL_PATH}")

        for report_id, lag in REPORT_PARAMS:
            out_csv = os.path.join(OUTPUT_DIR, f"report_{report_id}_lag{lag}.csv")
            logging.info(f"Fetching report {report_id}, lag={lag}")

            try:
                # 3) invoke the UDF entirely in memory
                #     This returns a COM SafeArray (tuple of tuples)
                arr = app.api.Run("Ice_Report_Legacy", report_id, "", lag)

                # 4) convert to Python list of lists
                data = [list(r) for r in arr]
                if len(data) < 2:
                    raise ValueError("No data returned from Ice_Report_Legacy")

                # 5) split headers vs rows
                headers, *rows = data

                # 6) build DataFrame & write CSV
                df = pd.DataFrame(rows, columns=headers)
                df.to_csv(out_csv, index=False)
                logging.info(f"   • {len(df)} rows → {out_csv}")

            except Exception as e:
                logging.error(f"   ✗ Failed {report_id}, lag={lag}: {e}")

            # small throttle
            time.sleep(0.1)

    finally:
        app.kill()
        logging.info("Excel instance closed.")

if __name__ == "__main__":
    fetch_all_reports()