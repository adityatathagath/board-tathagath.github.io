<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Collapsible List Example</title>
    <!-- Include Tailwind CSS -->
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <!-- Custom CSS for arrow rotation -->
    <style>
        .rotate-90 {
            transform: rotate(90deg);
        }
    </style>
</head>
<body class="p-4">

<div id="collapsible-list" class="space-y-2">
    <!-- This will be populated dynamically -->
</div>

<!-- Textbox to display clicked item's ID -->
<div>
    <input type="text" id="selected-id" class="border-gray-300 border p-2 mt-4 w-full" readonly>
</div>

<script>
    // Sample JSON data (replace with your actual data)
    var data = [
        {"name": "Macro", "id": 41253, "level": 3},
        {"name": "Macrosc", "id": 4125032, "level": 4},
        {"name": "Macrocsncs", "id": 4125032, "level": 4},
        {"name": "CMMacro", "id": 41250123, "level": 5},
        {"name": "Macrozxc", "id": 412504678, "level": 3},
        {"name": "Macroasd", "id": 41250, "level": 4},
        {"name": "Macroazxcd", "id": 41250, "level": 4},
        {"name": "Macronddnnd", "id": 4125037474, "level": 3},
        {"name": "Macrohdhd", "id": 4125037474, "level": 4},
        {"name": "cog Macro", "id": 4125012345, "level": 5}
        // Add more data as needed
    ];

    // Function to generate the collapsible list
    function generateCollapsibleList(data, container) {
        // Group items by their level
        var levels = {};
        data.forEach(function(item) {
            if (!levels[item.level]) {
                levels[item.level] = [];
            }
            levels[item.level].push(item);
        });

        // Sort levels by numeric order
        var sortedLevels = Object.keys(levels).sort(function(a, b) {
            return a - b;
        });

        // Generate HTML for each level
        sortedLevels.forEach(function(level) {
            levels[level].forEach(function(item) {
                var div = document.createElement('div');
                div.className = 'flex items-center';

                var spanWrapper = document.createElement('div');
                spanWrapper.className = 'cursor-pointer';
                div.appendChild(spanWrapper);

                var arrowSpan = document.createElement('span');
                arrowSpan.className = 'arrow-icon';
                arrowSpan.textContent = 'â–¶';
                arrowSpan.onclick = function() {
                    toggleCollapse(this);
                };
                spanWrapper.appendChild(arrowSpan);

                var itemSpan = document.createElement('span');
                itemSpan.className = 'level-item';
                itemSpan.setAttribute('data-id', item.id);
                itemSpan.textContent = item.name;
                itemSpan.onclick = function() {
                    handleItemClick(this);
                };
                spanWrapper.appendChild(itemSpan);

                var nestedDiv = document.createElement('div');
                nestedDiv.className = 'ml-4 hidden'; // Initially hidden nested items
                div.appendChild(nestedDiv);

                container.appendChild(div);
            });
        });
    }

    // Function to toggle collapse/expand of nested items
    function toggleCollapse(icon) {
        icon.classList.toggle('rotate-90');
        var nestedItems = icon.parentElement.nextElementSibling;
        nestedItems.classList.toggle('hidden');
    }

    // Function to handle item clicks and display ID in textbox
    function handleItemClick(item) {
        var id = item.getAttribute('data-id');
        document.getElementById('selected-id').value = id;
    }

    // Call function to generate the collapsible list after the DOM is fully loaded
    document.addEventListener('DOMContentLoaded', function() {
        generateCollapsibleList(data, document.getElementById('collapsible-list'));
    });
</script>

</body>
</html>