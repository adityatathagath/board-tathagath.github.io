<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Collapsible List Example</title>
    <!-- Include Tailwind CSS -->
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <!-- Custom CSS for arrow rotation -->
    <style>
        .rotate-90 {
            transform: rotate(90deg);
        }
    </style>
</head>
<body class="p-4">

<div id="collapsible-list" class="space-y-2">
    <!-- This will be populated dynamically -->
</div>

<!-- Textbox to display clicked item's ID -->
<div>
    <input type="text" id="selected-id" class="border-gray-300 border p-2 mt-4 w-full" readonly>
</div>

<script>
    // Sample JSON data (replace with your actual data)
    var data = [
        {"name": "Macro", "id": 41253, "level": 3},
        {"name": "Macrosc", "id": 4125032, "level": 4},
        {"name": "Macrocsncs", "id": 4125032, "level": 4},
        {"name": "CMMacro", "id": 41250123, "level": 5},
        {"name": "Macrozxc", "id": 412504678, "level": 3},
        {"name": "Macroasd", "id": 41250, "level": 4},
        {"name": "Macroazxcd", "id": 41250, "level": 4},
        {"name": "Macronddnnd", "id": 4125037474, "level": 3},
        {"name": "Macrohdhd", "id": 4125037474, "level": 4},
        {"name": "cog Macro", "id": 4125012345, "level": 5}
        // Add more data as needed
    ];

    // Function to generate the collapsible list
    function generateCollapsibleList(data, container) {
        var html = '';

        // Filter data for level 3 initially visible items
        var level3Data = data.filter(function(item) {
            return item.level === 3;
        });

        // Generate HTML for level 3 items
        level3Data.forEach(function(item) {
            html += '<div class="flex items-center">';
            html += '<div class="cursor-pointer">';
            html += '<span class="arrow-icon" onclick="toggleCollapse(this)">â–¶</span>';
            html += '<span class="level-item" data-id="' + item.id + '">' + item.name + '</span>';
            html += '</div>';
            html += '</div>';
            html += '<div class="ml-4 hidden">'; // Initially hidden nested items
            html += '</div>';
        });

        // Append generated HTML to the container
        container.innerHTML = html;

        // Add event listeners after HTML is populated
        var arrowIcons = container.querySelectorAll('.arrow-icon');
        arrowIcons.forEach(function(icon) {
            icon.addEventListener('click', function() {
                toggleCollapse(this);
            });
        });

        var levelItems = container.querySelectorAll('.level-item');
        levelItems.forEach(function(item) {
            item.addEventListener('click', function() {
                var id = this.getAttribute('data-id');
                document.getElementById('selected-id').value = id;
            });
        });
    }

    // Function to toggle collapse/expand of nested items
    function toggleCollapse(icon) {
        icon.classList.toggle('rotate-90');
        var nestedItems = icon.parentElement.nextElementSibling;
        nestedItems.classList.toggle('hidden');
    }

    // Call function to generate the collapsible list after the DOM is fully loaded
    document.addEventListener('DOMContentLoaded', function() {
        generateCollapsibleList(data, document.getElementById('collapsible-list'));
    });
</script>

</body>
</html>