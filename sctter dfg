import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objs as go
from plotly.subplots import make_subplots

# Assuming your dataframe is named df and has the columns: 'issuerid', 'allocated', 'delta'
# For demonstration, let's create a sample dataframe
np.random.seed(0)
df = pd.DataFrame({
    'issuerid': np.arange(1, 6001),
    'allocated': np.random.randn(6000) * 100 + 1000,  # example values
    'delta': np.random.randn(6000) * 50 + 500          # example values
})

# Detect outliers using IQR method for 'allocated'
Q1_allocated = df['allocated'].quantile(0.25)
Q3_allocated = df['allocated'].quantile(0.75)
IQR_allocated = Q3_allocated - Q1_allocated
outliers_allocated = (df['allocated'] < (Q1_allocated - 1.5 * IQR_allocated)) | (df['allocated'] > (Q3_allocated + 1.5 * IQR_allocated))

# Detect outliers using IQR method for 'delta'
Q1_delta = df['delta'].quantile(0.25)
Q3_delta = df['delta'].quantile(0.75)
IQR_delta = Q3_delta - Q1_delta
outliers_delta = (df['delta'] < (Q1_delta - 1.5 * IQR_delta)) | (df['delta'] > (Q3_delta + 1.5 * IQR_delta))

# Combine the outliers for 'allocated' and 'delta'
df['outlier'] = outliers_allocated | outliers_delta

# Create subplots for hexbin plots
fig_hex = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=('Hexbin Plot for Allocated', 'Hexbin Plot for Delta'))

# Hexbin plot for allocated
hex_allocated = px.density_heatmap(df, x='issuerid', y='allocated', nbinsx=50, nbinsy=50, color_continuous_scale='Blues')
fig_hex.add_trace(hex_allocated.data[0], row=1, col=1)

# Hexbin plot for delta
hex_delta = px.density_heatmap(df, x='issuerid', y='delta', nbinsx=50, nbinsy=50, color_continuous_scale='Oranges')
fig_hex.add_trace(hex_delta.data[0], row=2, col=1)

# Update layout
fig_hex.update_layout(
    height=800, 
    title='Hexbin Plots for Allocated and Delta',
    xaxis_title='IssuerID',
    yaxis_title='Values'
)

# Show the figure
fig_hex.show()

# Density plots for allocated and delta
fig_density = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=('Density Plot for Allocated', 'Density Plot for Delta'))

# Density plot for allocated
density_allocated = px.density_contour(df, x='issuerid', y='allocated')
fig_density.add_trace(density_allocated.data[0], row=1, col=1)
fig_density.add_trace(density_allocated.data[1], row=1, col=1)

# Density plot for delta
density_delta = px.density_contour(df, x='issuerid', y='delta')
fig_density.add_trace(density_delta.data[0], row=2, col=1)
fig_density.add_trace(density_delta.data[1], row=2, col=1)

# Update layout
fig_density.update_layout(
    height=800, 
    title='Density Plots for Allocated and Delta',
    xaxis_title='IssuerID',
    yaxis_title='Values'
)

# Show the figure
fig_density.show()

# Faceting Scatter Plot by a Categorical Variable
# Adding a categorical variable for illustration
df['category'] = np.random.choice(['A', 'B', 'C'], size=len(df))

fig_facet = px.scatter(df, x='issuerid', y='allocated', color='category', facet_col='category', title='Faceted Scatter Plot for Allocated by Category')
fig_facet.show()

fig_facet_delta = px.scatter(df, x='issuerid', y='delta', color='category', facet_col='category', title='Faceted Scatter Plot for Delta by Category')
fig_facet_delta.show()