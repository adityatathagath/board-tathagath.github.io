<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ecodamus Game Analysis</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body>
    <!-- Navigation Bar -->
    <nav class="bg-gray-800 text-white p-4">
        <div class="flex justify-between">
            <div class="text-xl">Ecodamus Game Analysis</div>
        </div>
    </nav>

    <!-- Winner Image and Celebration Animation -->
    <section class="text-center py-8">
        <h2 class="text-2xl font-semibold">Congratulations to the Winner!</h2>
        <div id="celebrationAnimation" class="w-full h-64 bg-yellow-200 mt-4">
            <img src="{{ winner_image_url }}" alt="Winner" class="mx-auto rounded-full w-32 h-32 mb-4">
            <p>ðŸŽ‰ ðŸŽ‰ ðŸŽ‰</p>
        </div>
    </section>

    <!-- Analysis Section -->
    <section class="px-8 py-4">
        <h2 class="text-2xl font-semibold mb-4">Player Performance Comparison</h2>
        <div class="flex justify-between mb-4">
            <select id="player1" class="p-2 border border-gray-300 rounded">
                <option value="">Select Player 1</option>
                {% for row in score_table %}
                    <option value="{{ row['Name'] }}">{{ row['Name'] }}</option>
                {% endfor %}
            </select>
            <select id="player2" class="p-2 border border-gray-300 rounded">
                <option value="">Select Player 2</option>
                {% for row in score_table %}
                    <option value="{{ row['Name'] }}">{{ row['Name'] }}</option>
                {% endfor %}
            </select>
        </div>
        <canvas id="comparisonRadarChart"></canvas>

        <!-- Top Asset Classes -->
        <h2 class="text-2xl font-semibold mb-4 mt-8">Top Asset Classes and Impact</h2>
        <canvas id="assetImpactChart"></canvas>

        <!-- Score Distribution -->
        <h2 class="text-2xl font-semibold mb-4 mt-8">Score Distribution</h2>
        <canvas id="scoreDistributionChart"></canvas>

        <!-- Heatmap for Asset Class Performance -->
        <h2 class="text-2xl font-semibold mb-4 mt-8">Asset Class Performance Heatmap</h2>
        <canvas id="heatmapChart"></canvas>
    </section>

    <script>
        // Data for Overall Performance Trends (Sample - replace with actual data)
        const assetClasses = {{ asset_classes | tojson }};
        const playerScores = {{ score_table | tojson }};
        const playerNames = playerScores.map(player => player['Name']);
        
        // Prepare datasets for the charts
        let playerPerformanceData = playerScores.map(player => player['Scores']);
        let assetImpactData = assetClasses.map((asset, index) => {
            return {
                label: asset,
                data: playerScores.map(player => player['Scores'][index]),
                backgroundColor: `rgba(${(index * 50) % 255}, ${(index * 80) % 255}, ${(index * 120) % 255}, 0.6)`,
                borderColor: `rgba(${(index * 50) % 255}, ${(index * 80) % 255}, ${(index * 120) % 255}, 1)`,
                borderWidth: 1
            };
        });

        // Overall Performance Trends (Line Chart)
        const performanceTrendsData = {
            labels: assetClasses,
            datasets: playerPerformanceData.map((data, index) => ({
                label: playerNames[index],
                data: data,
                fill: false,
                borderColor: `rgba(${(index * 60) % 255}, ${(index * 120) % 255}, ${(index * 180) % 255}, 1)`,
                tension: 0.1
            }))
        };

        // Top Asset Classes Impact (Bar Chart)
        const assetImpactChartData = {
            labels: assetClasses,
            datasets: assetImpactData
        };

        // Score Distribution (Histogram)
        const scoreDistributionData = {
            labels: playerScores.map(player => player['Name']),
            datasets: [{
                label: 'Score Distribution',
                data: playerScores.map(player => player['TotalScore']),
                backgroundColor: 'rgba(153, 102, 255, 0.6)',
                borderColor: 'rgba(153, 102, 255, 1)',
                borderWidth: 1
            }]
        };

        // Heatmap (For Asset Class Performance)
        const heatmapData = {
            labels: playerNames,
            datasets: [{
                label: 'Asset Class Performance Heatmap',
                data: playerScores.map(player => player['Scores']),
                backgroundColor: function(context) {
                    const value = context.dataset.data[context.dataIndex];
                    const alpha = value / Math.max(...playerScores.map(p => p['TotalScore']));
                    return `rgba(0, 255, 0, ${alpha})`; // Color intensity based on score
                },
                borderWidth: 1
            }]
        };

        // Initialize the charts
        new Chart(document.getElementById('comparisonRadarChart'), {
            type: 'radar',
            data: performanceTrendsData
        });

        new Chart(document.getElementById('assetImpactChart'), {
            type: 'bar',
            data: assetImpactChartData
        });

        new Chart(document.getElementById('scoreDistributionChart'), {
            type: 'bar',
            data: scoreDistributionData
        });

        new Chart(document.getElementById('heatmapChart'), {
            type: 'bubble',  // Using a bubble chart as a heatmap
            data: heatmapData
        });

        // Celebration Animation
        document.addEventListener('DOMContentLoaded', () => {
            const celebrationElement = document.getElementById('celebrationAnimation');
            setTimeout(() => {
                celebrationElement.classList.add('bg-green-200');
                celebrationElement.innerHTML += '<p>ðŸŽ‰ ðŸŽ‰ ðŸŽ‰</p>';
            }, 1000); // Trigger animation after 1 second
        });

        // Function to handle player selection for comparison
        document.getElementById('player1').addEventListener('change', updateComparisonChart);
        document.getElementById('player2').addEventListener('change', updateComparisonChart);

        function updateComparisonChart() {
            const player1 = document.getElementById('player1').value;
            const player2 = document.getElementById('player2').value;
            const chart = Chart.getChart('comparisonRadarChart');
            
            if (player1 && player2) {
                const data1 = playerScores.find(player => player['Name'] === player1)['Scores'];
                const data2 = playerScores.find(player => player['Name'] === player2)['Scores'];

                chart.data.datasets[0].data = data1;
                chart.data.datasets[1].data = data2;
                chart.update();
            }
        }
    </script>
</body>
</html>