import dash
from dash import dcc, html, Input, Output, State, MATCH, ALL
import dash_ag_grid as dag
import pandas as pd
import win32com.client

app = dash.Dash(__name__, suppress_callback_exceptions=True)
server = app.server

# --- Helper: Connect to cube and fetch schema ---
def get_cube_schema():
    conn = win32com.client.Dispatch("ADODB.Connection")
    conn.ConnectionString = (
        "Provider=MSOLAP.8;"
        "Data Source=gpdfm001;"
        "Initial Catalog=MacroCube;"
        "Integrated Security=SSPI;"
    )
    conn.Open()

    dim_schema = conn.OpenSchema(12)  # MDSCHEMA_HIERARCHIES
    dimensions = []
    hierarchy_map = {}
    while not dim_schema.EOF:
        dim = dim_schema.Fields("DIMENSION_UNIQUE_NAME").Value
        hier = dim_schema.Fields("HIERARCHY_UNIQUE_NAME").Value
        cap = dim_schema.Fields("HIERARCHY_CAPTION").Value
        if "[Measures]" not in dim:
            dimensions.append({"label": cap, "value": hier})
            hierarchy_map[cap] = hier
        dim_schema.MoveNext()

    measure_schema = conn.OpenSchema(20)  # MDSCHEMA_MEASURES
    measures = []
    while not measure_schema.EOF:
        measures.append(measure_schema.Fields("MEASURE_NAME").Value)
        measure_schema.MoveNext()

    conn.Close()
    return sorted(dimensions, key=lambda x: x['label']), sorted(list(set(measures))), hierarchy_map

# --- Helper: Get member values for a given hierarchy ---
def get_members_for_filter(hierarchy):
    try:
        mdx = f"SELECT {hierarchy}.Children ON ROWS FROM [MacroCube]"
        df = run_mdx_query(mdx)
        return df.iloc[:, 0].dropna().unique().tolist()
    except:
        return []

# --- Helper: Run MDX and return as DataFrame ---
def run_mdx_query(mdx):
    conn = win32com.client.Dispatch("ADODB.Connection")
    conn.ConnectionString = (
        "Provider=MSOLAP.8;"
        "Data Source=gpdfm001;"
        "Initial Catalog=MacroCube;"
        "Integrated Security=SSPI;"
    )
    conn.Open()
    rs = win32com.client.Dispatch("ADODB.Recordset")
    rs.Open(mdx, conn)

    fields = [rs.Fields(i).Name for i in range(rs.Fields.Count)]
    rows = []
    while not rs.EOF:
        rows.append([rs.Fields(i).Value for i in range(rs.Fields.Count)])
        rs.MoveNext()

    rs.Close()
    conn.Close()
    return pd.DataFrame(rows, columns=fields)

# --- Load once on app start ---
dimensions, measures, hierarchy_map = get_cube_schema()

# --- Layout ---
app.layout = html.Div([
    html.H2("üìä MacroCube Pivot Explorer (Dash + AG Grid)", style={"marginBottom": "20px"}),

    html.Div([
        html.Div([
            html.Label("üß± Row Field"),
            dcc.Dropdown(dimensions, id="row-field", value=None, clearable=True),
            html.Label("üß± Column Field"),
            dcc.Dropdown(dimensions, id="col-field", value=None, clearable=True),
            html.Label("üîç Filter Fields"),
            dcc.Dropdown(dimensions, id="filter-fields", multi=True, clearable=True),
            html.Label("üí∞ Value (Measure)"),
            dcc.Dropdown(measures, id="value-field", value=measures[0], clearable=False),
            html.Br(),
            html.Button("‚ñ∂ Run Query", id="run-query", n_clicks=0),
            html.Div(id="status-msg", style={"marginTop": "10px", "color": "green"})
        ], style={"width": "25%", "float": "left", "padding": "20px"}),

        html.Div([
            html.H4("üéØ Filter Member Selections"),
            html.Div(id="dynamic-filter-ui"),
            html.H4("üì• Output"),
            dag.AgGrid(id="pivot-grid", columnSize="responsive", className="ag-theme-alpine", style={"height": "600px", "width": "100%"})
        ], style={"width": "72%", "float": "right", "padding": "10px"})
    ])
])

# --- Callback to show filter member dropdowns ---
@app.callback(
    Output("dynamic-filter-ui", "children"),
    Input("filter-fields", "value")
)
def update_dynamic_filter_ui(selected_filters):
    if not selected_filters:
        return []

    children = []
    for f_label in selected_filters:
        hier = hierarchy_map.get(f_label)
        if not hier:
            continue
        members = get_members_for_filter(hier)
        children.append(html.Div([
            html.Label(f"{f_label} Members"),
            dcc.Dropdown(members, id={'type': 'dynamic-filter', 'index': hier}, multi=True)
        ]))
    return children

# --- Callback to generate MDX and display pivot result ---
@app.callback(
    Output("pivot-grid", "rowData"),
    Output("pivot-grid", "columnDefs"),
    Output("status-msg", "children"),
    Input("run-query", "n_clicks"),
    State("row-field", "value"),
    State("col-field", "value"),
    State("filter-fields", "value"),
    State("value-field", "value"),
    State({'type': 'dynamic-filter', 'index': ALL}, 'value')
)
def generate_pivot_table(n_clicks, row, col, filters, measure, filter_vals):
    if not row or not col or not measure:
        return [], [], "‚ùó Please select at least row, column, and measure."

    mdx = f"""
    SELECT
      NON EMPTY {{[Measures].[{measure}]}} ON COLUMNS,
      NON EMPTY ({row}.Members * {col}.Members) ON ROWS
    FROM [MacroCube]
    """

    if filters and filter_vals:
        where_clauses = []
        for f_label, val_list in zip(filters, filter_vals):
            hier = hierarchy_map.get(f_label)
            if hier and val_list:
                member_set = ",".join(f"{hier}.[{v}]" for v in val_list)
                where_clauses.append(f"{{{member_set}}}")
        if where_clauses:
            mdx += f"\nWHERE ({','.join(where_clauses)})"

    try:
        df = run_mdx_query(mdx)
        columns = [{"headerName": col, "field": col} for col in df.columns]
        return df.to_dict("records"), columns, f"‚úÖ Fetched {len(df)} rows."
    except Exception as e:
        return [{"Error": str(e)}], [{"headerName": "Error", "field": "Error"}], f"‚ùå Error: {e}"

# --- Run the app ---
if __name__ == "__main__":
    app.run_server(debug=True, port=8050)