import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objs as go
from plotly.subplots import make_subplots
from sklearn.ensemble import IsolationForest

# Assuming your dataframe is named df and has the columns: 'issuerid', 'allocated', 'delta'
# For demonstration, let's create a sample dataframe
np.random.seed(0)
df = pd.DataFrame({
    'issuerid': np.arange(1, 6001),
    'allocated': np.random.randn(6000) * 100 + 1000,  # example values
    'delta': np.random.randn(6000) * 50 + 500          # example values
})

# Isolation Forest model
iso_forest = IsolationForest(contamination=0.01, random_state=0)

# Fit the model
df['allocated_outlier'] = iso_forest.fit_predict(df[['allocated']])
df['delta_outlier'] = iso_forest.fit_predict(df[['delta']])

# Create subplots
fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=('Isolation Forest Outliers for Allocated', 'Isolation Forest Outliers for Delta'))

# Scatter plot for 'allocated'
fig.add_trace(go.Scatter(
    x=df['issuerid'], 
    y=df['allocated'], 
    mode='markers', 
    marker=dict(color=np.where(df['allocated_outlier'] == -1, 'red', 'blue'), opacity=0.5),
    name='Allocated'
), row=1, col=1)

# Scatter plot for 'delta'
fig.add_trace(go.Scatter(
    x=df['issuerid'], 
    y=df['delta'], 
    mode='markers', 
    marker=dict(color=np.where(df['delta_outlier'] == -1, 'red', 'orange'), opacity=0.5),
    name='Delta'
), row=2, col=1)

# Update layout
fig.update_layout(
    height=800, 
    title='Interactive Isolation Forest Outliers for Allocated and Delta',
    xaxis_title='IssuerID',
    yaxis_title='Values',
    hovermode='x unified'
)

# Show the figure
fig.show()