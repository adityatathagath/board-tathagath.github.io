from flask import Flask, render_template
import pandas as pd
import plotly.graph_objects as go
import plotly
import json

app = Flask(__name__)

# Function to read data from the analysis sheet and process it
def read_analysis_data():
    # Read the Excel file
    df = pd.read_excel('ecodamus.xlsx', sheet_name='analysis', header=None)
    
    # Extract asset class names from column 1 (from row 2 to row 17)
    asset_classes = df.iloc[1:17, 0].tolist()  # Row 2 to Row 17 (index 1 to 16 in Python)
    
    # Extract player names and their scores for the asset classes
    player_data = {
        'Rank': df.iloc[0, 1:].tolist(),
        'Name': df.iloc[1, 1:].tolist(),
        'Scores': {asset_classes[i]: df.iloc[2 + i, 1:].tolist() for i in range(15)},
        'Total Score': df.iloc[17, 1:].tolist()
    }

    return player_data, asset_classes

# Function to generate the spider chart data for comparing two players
def generate_spider_chart(player_1_scores, player_2_scores, asset_classes):
    fig = go.Figure()

    # Add Player 1 data
    fig.add_trace(go.Scatterpolar(
        r=player_1_scores,
        theta=asset_classes,
        fill='toself',
        name='Player 1',
        line=dict(color='blue')
    ))

    # Add Player 2 data
    fig.add_trace(go.Scatterpolar(
        r=player_2_scores,
        theta=asset_classes,
        fill='toself',
        name='Player 2',
        line=dict(color='red')
    ))

    # Update layout to improve the appearance
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 100]  # Assuming score range is 0 to 100
            )
        ),
        title="Comparison of Player 1 and Player 2",
        showlegend=True
    )

    # Return the chart as JSON
    return json.dumps(fig, cls=plotly.utils.PlotlyJSONEncoder)

@app.route('/')
def index():
    # Automatically fetch and process the analysis data
    player_data, asset_classes = read_analysis_data()

    # Example: Automatically pick the first two players for the comparison chart (could be dynamic)
    player_1_scores = player_data['Scores'][asset_classes[0]][0:5]  # First player's first 5 asset scores
    player_2_scores = player_data['Scores'][asset_classes[0]][5:10]  # Second player's first 5 asset scores

    # Generate the Spider Chart data
    spider_chart_data = generate_spider_chart(player_1_scores, player_2_scores, asset_classes)

    return render_template('index.html', player_data=player_data, spider_chart_data=spider_chart_data)

if __name__ == '__main__':
    app.run(debug=True)


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ecodamus Results and Analysis</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100 text-gray-900">

    <!-- Congratulations Section with Animation -->
    <div class="relative bg-blue-600 text-white py-16 px-4">
        <div class="absolute inset-0 bg-cover bg-center bg-opacity-60" style="background-image: url('/static/winner-image.jpg');"></div>
        <div class="container mx-auto text-center relative z-10">
            <h1 class="text-5xl font-bold animate__animated animate__fadeIn animate__delay-1s">ðŸŽ‰ Congratulations to the Winners! ðŸŽ‰</h1>
            <p class="mt-6 text-lg animate__animated animate__fadeIn animate__delay-2s">Outstanding achievements in performance across all asset classes!</p>
        </div>
    </div>

    <!-- Data Table Analysis -->
    <div class="container mx-auto py-10">
        <h2 class="text-3xl font-bold mb-6 text-center">Ecodamus Results and Analysis</h2>
        <div class="overflow-x-auto bg-white rounded-lg shadow-lg">
            <table class="min-w-full text-sm text-left text-gray-500">
                <thead class="bg-gray-800 text-white">
                    <tr>
                        <th class="px-6 py-4 cursor-pointer hover:bg-gray-700">Rank</th>
                        <th class="px-6 py-4 cursor-pointer hover:bg-gray-700">Name</th>
                        {% for asset in asset_classes %}
                            <th class="px-6 py-4 cursor-pointer hover:bg-gray-700">{{ asset }}</th>
                        {% endfor %}
                        <th class="px-6 py-4 cursor-pointer hover:bg-gray-700">Total Score</th>
                    </tr>
                </thead>
                <tbody>
                    {% for i in range(player_data['Rank']|length) %}
                    <tr class="border-b hover:bg-gray-200 transition duration-300">
                        <td class="px-6 py-4">{{ player_data['Rank'][i] }}</td>
                        <td class="px-6 py-4">{{ player_data['Name'][i] }}</td>
                        {% for asset in asset_classes %}
                            <td class="px-6 py-4">{{ player_data['Scores'][asset][i] }}</td>
                        {% endfor %}
                        <td class="px-6 py-4">{{ player_data['Total Score'][i] }}</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>

    <!-- Spider Chart Section -->
    <div class="container mx-auto py-10">
        <h2 class="text-3xl font-bold mb-6 text-center">Player Comparison</h2>
        <div id="spider-chart"></div>
        <script>
            var data = {{ spider_chart_data | safe }};
            Plotly.newPlot('spider-chart', data.data, data.layout);
        </script>
    </div>

</body>
</html>
