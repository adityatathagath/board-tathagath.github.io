<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <title>Ecodamus Insights</title>
    <style>
        /* Barclays Colors */
        body { background-color: #f4f4f4; }
        .barclays-blue { color: #00aeef; }
        .barclays-dark-blue { background-color: #00395d; }
        .barclays-light-gray { background-color: #f4f4f4; }

        /* Animations */
        .animate-slide-in {
            animation: slide-in 1.5s ease-out forwards;
        }
        @keyframes slide-in {
            from {
                transform: translateY(-50px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        .animate-bounce {
            animation: bounce 2s infinite;
        }
        @keyframes bounce {
            0%, 100% {
                transform: translateY(0);
            }
            50% {
                transform: translateY(-10px);
            }
        }

        .crazy-animation {
            animation: crazy 3s infinite;
        }
        @keyframes crazy {
            0% { transform: scale(1) rotate(0deg); }
            25% { transform: scale(1.1) rotate(5deg); }
            50% { transform: scale(1.2) rotate(-5deg); }
            75% { transform: scale(1.1) rotate(3deg); }
            100% { transform: scale(1) rotate(0deg); }
        }

        /* Confetti Animation */
        #confetti {
            pointer-events: none;
        }

        /* Chart Container Styles */
        .chart-container {
            max-width: 500px;
            margin: auto;
        }

        /* Enhanced Styles */
        .insight-card {
            background-color: #e0f7fa;
            border: 1px solid #00aeef;
        }

        .rounded-hero {
            border-radius: 20px;
        }
    </style>
</head>
<body class="min-h-screen bg-gradient-to-br from-gray-100 to-gray-300 p-6">
    <!-- Navbar -->
    <nav class="bg-barclays-dark-blue text-white p-4 mb-8 flex justify-between items-center">
        <div class="flex items-center">
            <img src="static/logo.png" alt="Company Logo" class="h-10 w-10 mr-4">
            <span class="text-xl font-bold">Ecodamus Results 2024</span>
        </div>
    </nav>

    <!-- Hero Section -->
    <div class="hero-section relative bg-barclays-dark-blue text-white p-8 rounded-lg shadow-lg mb-8 rounded-hero">
        <div id="confetti" class="absolute inset-0"></div>
        <div class="container mx-auto text-center relative z-10">
            <h1 class="text-4xl font-bold mb-4 animate-slide-in">üéâ Congratulations to our Winner!</h1>
            <img id="winner-photo" src="static/winner.jpg" alt="Winner Photo"
                class="w-32 h-32 mx-auto rounded-full shadow-md border-4 border-white animate-bounce">
            <h2 id="winner-crazy-name" class="text-3xl font-bold mt-4 crazy-animation">Aditya Tathagath</h2>
            <h2 id="winner-name" class="text-3xl font-bold mt-4"></h2>
            <p id="winner-reasoning" class="text-lg italic mt-2"></p>
            <div id="winner-comments" class="bg-white text-gray-800 mt-6 p-4 rounded-md shadow-lg">
                <h3 class="text-xl font-semibold barclays-blue">Winner's Prediction Insights</h3>
                <p id="winner-comments-text" class="mt-2">Loading comments...</p>
            </div>
        </div>
    </div>

    <!-- Key Insights Section -->
    <div class="mt-8">
        <h2 class="text-2xl font-bold barclays-blue mb-4">üèÜ Key Insights</h2>
        <div id="key-insights" class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div class="insight-card p-4 rounded-md shadow-md">
                <h3 class="text-lg font-semibold">Best Performing Player</h3>
                <p id="best-performing-player"></p>
            </div>
            <div class="insight-card p-4 rounded-md shadow-md">
                <h3 class="text-lg font-semibold">Player with Most 10s</h3>
                <p id="most-10s-player"></p>
            </div>
        </div>
    </div>

    <!-- Player Comparison Section -->
    <h2 class="text-2xl font-bold barclays-blue mt-8 mb-4">‚öñÔ∏è Compare Players</h2>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
            <label for="player1" class="block text-lg font-semibold barclays-blue">Select Player 1:</label>
            <select id="player1" class="w-full p-2 border-2 border-barclays-blue rounded-md">
                <!-- Options populated dynamically -->
            </select>
        </div>
        <div>
            <label for="player2" class="block text-lg font-semibold barclays-blue">Select Player 2:</label>
            <select id="player2" class="w-full p-2 border-2 border-barclays-blue rounded-md">
                <!-- Options populated dynamically -->
            </select>
        </div>
    </div>
    <div class="mt-4 chart-container">
        <canvas id="playerComparisonChart"></canvas>
    </div>

    <!-- Leaderboard Section -->
    <h2 class="text-2xl font-bold barclays-blue mt-8 mb-4">üèÖ Leaderboard</h2>
    <div class="mb-4">
        <input type="text" id="search" placeholder="Search by name..." 
               class="w-full p-2 border-2 border-barclays-blue rounded-md">
    </div>
    <table class="w-full text-left border-collapse table-auto">
        <thead class="bg-barclays-dark-blue text-white">
            <tr>
                <th class="px-4 py-2">Rank</th>
                <th class="px-4 py-2">Name</th>
                <th class="px-4 py-2">Total Score</th>
            </tr>
        </thead>
        <tbody id="leaderboard"></tbody>
    </table>

    <!-- Visualizations Section -->
    <h2 class="text-2xl font-bold barclays-blue mt-8 mb-4">üìà Visualizations</h2>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div class="chart-container">
            <h3 class="text-lg font-semibold text-center">Most Consistent Players</h3>
            <canvas id="consistentPlayersChart"></canvas>
        </div>
        <div class="chart-container">
            <h3 class="text-lg font-semibold text-center">Average Asset Scores</h3>
            <canvas id="assetChart"></canvas>
        </div>
    </div>

    <!-- JavaScript -->
    <script>
        let playerComparisonChart;

        async function fetchInsights() {
            const response = await fetch("/api/insights");
            const data = await response.json();

            // Populate Key Insights
            document.getElementById("best-performing-player").innerText = `${data.best_performing_player.name} (Average: ${data.best_performing_player.average.toFixed(2)})`;
            document.getElementById("most-10s-player").innerText = `${data.most_10s_player.name} (${data.most_10s_player.count} scores of 10)`;
        }

        async function fetchPlayers() {
            const response = await fetch("/api/leaderboard");
            const players = await response.json();

            // Populate dropdowns
            const player1Select = document.getElementById("player1");
            const player2Select = document.getElementById("player2");

            players.forEach(player => {
                const option1 = document.createElement("option");
                option1.value = player.name;
                option1.textContent = player.name;
                player1Select.appendChild(option1);

                const option2 = document.createElement("option");
                option2.value = player.name;
                option2.textContent = player.name;
                player2Select.appendChild(option2);
            });

            // Set initial comparison
            if (players.length >= 2) {
                updateComparison(players[0].name, players[1].name);
                player1Select.value = players[0].name;
                player2Select.value = players[1].name;
            }
        }

        async function updateComparison(player1, player2) {
            const response = await fetch(`/api/compare?player1=${player1}&player2=${player2}`);
            const comparisonData = await response.json();

            if (playerComparisonChart) {
                playerComparisonChart.destroy();
            }

            playerComparisonChart = new Chart(document.getElementById("playerComparisonChart"), {
                type: "radar",
                data: {
                    labels: comparisonData.assets,
                    datasets: [
                        {
                            label: player1,
                            data: comparisonData.player1_scores,
                            borderColor: "#00aeef",
                            backgroundColor: "rgba(0, 174, 239, 0.4)",
                            pointBackgroundColor: "#00aeef",
                        },
                        {
                            label: player2,
                            data: comparisonData.player2_scores,
                            borderColor: "#00395d",
                            backgroundColor: "rgba(0, 57, 93, 0.4)",
                            pointBackgroundColor: "#00395d",
                        },
                    ],
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        r: {
                            angleLines: {
                                color: "#ccc",
                            },
                            suggestedMin: 0,
                            suggestedMax: 100,
                        },
                    },
                    plugins: {
                        legend: {
                            position: "top",
                        },
                    },
                },
            });
        }

        async function fetchLeaderboard(query = "") {
            const response = await fetch("/api/leaderboard");
            const data = await response.json();
            const filteredData = query
                ? data.filter(player => player.name.toLowerCase().includes(query.toLowerCase()))
                : data;

            const leaderboardBody = document.getElementById("leaderboard");
            leaderboardBody.innerHTML = filteredData.slice(0, 10).map(player => `
                <tr class="border-b">
                    <td class="px-4 py-2">${player.rank}</td>
                    <td class="px-4 py-2">${player.name}</td>
                    <td class="px-4 py-2">${player.total_score}</td>
                </tr>
            `).join('');
        }

        async function fetchChartData() {
            const response = await fetch("/api/chart-data");
            const data = await response.json();

            // Most Consistent Players Chart
            new Chart(document.getElementById("consistentPlayersChart"), {
                type: 'bar',
                data: {
                    labels: data.consistent_players.names,
                    datasets: [{
                        label: 'Consistency (Low Variance)',
                        data: data.consistent_players.variances,
                        backgroundColor: '#00aeef'
                    }]
                }
            });

            // Average Asset Scores Chart
            new Chart(document.getElementById("assetChart"), {
                type: 'line',
                data: {
                    labels: data.assets,
                    datasets: [{
                        label: 'Average Score',
                        data: data.asset_averages,
                        borderColor: '#00395d',
                        fill: false
                    }]
                }
            });
        }

        document.getElementById("player1").addEventListener("change", () => {
            const player1 = document.getElementById("player1").value;
            const player2 = document.getElementById("player2").value;
            if (player1 && player2) {
                updateComparison(player1, player2);
            }
        });

        document.getElementById("player2").addEventListener("change", () => {
            const player1 = document.getElementById("player1").value;
            const player2 = document.getElementById("player2").value;
            if (player1 && player2) {
                updateComparison(player1, player2);
            }
        });

        document.getElementById("search").addEventListener("input", event => {
            fetchLeaderboard(event.target.value);
        });

        fetchInsights();
        fetchPlayers();
        fetchLeaderboard();
        fetchChartData();
    </script>
</body>
</html>
