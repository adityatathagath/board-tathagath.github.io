from flask import Flask, render_template, jsonify
import pandas as pd

app = Flask(__name__)

# Load the data from the Excel file
df = pd.read_excel('ecodamus.xlsx', sheet_name='summary')

# Data preparation for the charts and analysis
top_players = df[['Rank', 'Name', 'Total Score']].sort_values(by='Total Score', ascending=False).head(10)

# Prepare asset class contributions (stacked bar for each player)
asset_classes = df.columns[2:-1]  # Excluding Rank, Name, Total Score
asset_class_contributions = df[asset_classes].values.tolist()

# Prepare Performance Across Asset Classes (bar chart)
performance_data = df[asset_classes]

# Prepare Average Score by Asset Class
average_scores = df[asset_classes].mean()

# Prepare Spider chart data (for player comparison)
def get_spider_data(player1, player2):
    player1_data = df[df['Name'] == player1][asset_classes].values.flatten()
    player2_data = df[df['Name'] == player2][asset_classes].values.flatten()
    return player1_data.tolist(), player2_data.tolist()

@app.route('/')
def index():
    return render_template('index.html', top_players=top_players.to_dict(orient='records'), 
                           asset_classes=asset_classes.tolist(), 
                           average_scores=average_scores.tolist())

@app.route('/search/<name>')
def search(name):
    player_data = df[df['Name'].str.contains(name, case=False, na=False)]
    return jsonify(player_data.to_dict(orient='records'))

@app.route('/compare/<player1>/<player2>')
def compare(player1, player2):
    player1_data, player2_data = get_spider_data(player1, player2)
    return jsonify({'player1': player1_data, 'player2': player2_data})

if __name__ == "__main__":
    app.run(debug=True)



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ecodamus - Game Analysis</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom"></script>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.0.3/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-900 text-white">
    <!-- Navbar -->
    <nav class="bg-cyan-600 p-4">
        <div class="container mx-auto text-center">
            <h1 class="text-4xl font-bold">Ecodamus Game Analysis</h1>
        </div>
    </nav>

    <!-- Top Players with Search -->
    <section class="mt-6">
        <div class="container mx-auto">
            <input type="text" id="searchBar" placeholder="Search Player..." class="px-4 py-2 mb-4 w-full bg-gray-800 text-white rounded">
            <div id="leaderboard">
                <h2 class="text-xl font-semibold">Top 10 Players</h2>
                <table class="table-auto w-full mt-4">
                    <thead>
                        <tr class="bg-cyan-500">
                            <th class="px-4 py-2">Rank</th>
                            <th class="px-4 py-2">Player</th>
                            <th class="px-4 py-2">Total Score</th>
                        </tr>
                    </thead>
                    <tbody id="leaderboardTable">
                        {% for player in top_players %}
                            <tr>
                                <td class="px-4 py-2">{{ player['Rank'] }}</td>
                                <td class="px-4 py-2">{{ player['Name'] }}</td>
                                <td class="px-4 py-2">{{ player['Total Score'] }}</td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </section>

    <!-- Charts Section -->
    <section class="mt-8">
        <div class="container mx-auto grid grid-cols-1 md:grid-cols-2 gap-8">
            <div>
                <h2 class="text-xl font-semibold mb-4">Asset Class Contribution to Total Score</h2>
                <canvas id="assetContributionChart"></canvas>
            </div>
            <div>
                <h2 class="text-xl font-semibold mb-4">Performance Across Asset Classes</h2>
                <canvas id="performanceChart"></canvas>
            </div>
        </div>
        
        <div class="container mx-auto grid grid-cols-1 md:grid-cols-2 gap-8 mt-8">
            <div>
                <h2 class="text-xl font-semibold mb-4">Score Distribution</h2>
                <canvas id="scoreDistributionChart"></canvas>
            </div>
            <div>
                <h2 class="text-xl font-semibold mb-4">Top Asset Classes by Average Score</h2>
                <canvas id="averageScoreChart"></canvas>
            </div>
        </div>

        <div class="container mx-auto mt-8">
            <h2 class="text-xl font-semibold mb-4">Compare Two Players</h2>
            <input type="text" id="player1" placeholder="Player 1" class="px-4 py-2 mb-4 w-full bg-gray-800 text-white rounded">
            <input type="text" id="player2" placeholder="Player 2" class="px-4 py-2 mb-4 w-full bg-gray-800 text-white rounded">
            <button id="compareButton" class="bg-green-600 px-4 py-2 rounded text-white">Compare</button>
            <canvas id="spiderChart"></canvas>
        </div>
    </section>

    <script>
        const assetContributionData = {{ asset_class_contributions | tojson }};
        const performanceData = {{ performance_data | tojson }};
        const averageScores = {{ average_scores | tojson }};
        const topPlayers = {{ top_players | tojson }};
        
        // Setup Charts
        const assetContributionChart = new Chart(document.getElementById('assetContributionChart'), {
            type: 'pie',
            data: {
                labels: ['Asset 1', 'Asset 2', 'Asset 3', 'Asset 4', 'Asset 5'],
                datasets: [{
                    data: assetContributionData[0],  // Example: Displaying the first playerâ€™s data
                    backgroundColor: ['#4CAF50', '#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107'],
                    borderColor: '#fff',
                    borderWidth: 2
                }]
            }
        });

        const performanceChart = new Chart(document.getElementById('performanceChart'), {
            type: 'bar',
            data: {
                labels: ['Asset 1', 'Asset 2', 'Asset 3', 'Asset 4', 'Asset 5'],
                datasets: performanceData.map((player, index) => ({
                    label: `Player ${topPlayers[index].Name}`,
                    data: player,
                    backgroundColor: 'rgba(0, 150, 136, 0.6)',
                    borderColor: 'rgba(0, 150, 136, 1)',
                    borderWidth: 1
                }))
            }
        });

        const scoreDistributionChart = new Chart(document.getElementById('scoreDistributionChart'), {
            type: 'histogram',
            data: {
                labels: ['Player 1', 'Player 2', 'Player 3', 'Player 4', 'Player 5'],
                datasets: [{
                    label: 'Total Score Distribution',
                    data: topPlayers.map(player => player['Total Score']),
                    backgroundColor: '#FFEB3B',
                    borderColor: '#FFC107',
                    borderWidth: 2
                }]
            }
        });

        const averageScoreChart = new Chart(document.getElementById('averageScoreChart'), {
            type: 'bar',
            data: {
                labels: ['Asset 1', 'Asset 2', 'Asset 3', 'Asset 4', 'Asset 5'],
                datasets: [{
                    label: 'Average Score by Asset',
                    data: averageScores,
                    backgroundColor: '#00BCD4',
                    borderColor: '#0097A7',
                    borderWidth: 1
                }]
            }
        });

        // Spider Chart comparison
        document.getElementById('compareButton').addEventListener('click', () => {
            const player1 = document.getElementById('player1').value;
            const player2 = document.getElementById('player2').value;
            
            fetch(`/compare/${player1}/${player2}`)
                .then(response => response.json())
                .then(data => {
                    const ctx = document.getElementById('spiderChart').getContext('2d');
                    const spiderChart = new Chart(ctx, {
                        type: 'radar',
                        data: {
                            labels: ['Asset 1', 'Asset 2', 'Asset 3', 'Asset 4', 'Asset 5'],
                            datasets: [
                                {
                                    label: player1,
                                    data: data.player1,
                                    backgroundColor: 'rgba(0, 150, 136, 0.3)',
                                    borderColor: 'rgba(0, 150, 136, 1)',
                                    borderWidth: 1
                                },
                                {
                                    label: player2,
                                    data: data.player2,
                                    backgroundColor: 'rgba(255, 87, 34, 0.3)',
                                    borderColor: 'rgba(255, 87, 34, 1)',
                                    borderWidth: 1
                                }
                            ]
                        }
                    });
                });
        });
    </script>
</body>
</html>