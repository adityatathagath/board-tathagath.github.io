import streamlit as st
import json
import os
import time

# Path for storing user data and quizzes
USER_DB = 'users.json'
QUIZ_DB = 'quiz.json'

# Helper to load JSON safely
def load_json(file_path, default_value):
    try:
        if os.path.exists(file_path):
            with open(file_path, 'r') as f:
                return json.load(f)
        else:
            return default_value
    except json.JSONDecodeError:
        # Reset to default if the file is corrupted
        return default_value

# Create or load user and quiz data
def load_users():
    return load_json(USER_DB, {})

def load_quiz():
    return load_json(QUIZ_DB, [])

def save_user(username, score):
    users = load_users()
    users[username] = score
    with open(USER_DB, 'w') as db:
        json.dump(users, db)

def save_quiz(quiz_data):
    quizzes = load_quiz()
    quizzes.append(quiz_data)
    with open(QUIZ_DB, 'w') as qb:
        json.dump(quizzes, qb)

def username_exists(username):
    users = load_users()
    return username in users

# Add a new quiz UI
def create_quiz_ui():
    st.title("Create a Quiz")

    quiz_name = st.text_input("Enter Quiz Name")

    questions = []
    
    num_questions = st.number_input("How many questions?", min_value=1, max_value=20, step=1)
    
    for i in range(num_questions):
        st.write(f"### Question {i+1}")
        question = {}
        
        question_type = st.selectbox(f"Select question type for Question {i+1}", ["MCQ", "Input"])

        question_text = st.text_area(f"Enter the text for Question {i+1}")
        question['content'] = question_text
        question['type'] = question_type.lower()

        if question_type == "MCQ":
            options = []
            for j in range(4):
                option = st.text_input(f"Enter Option {j+1} for Question {i+1}")
                options.append(option.lower())
            question['options'] = options
            
            answer_key = st.selectbox(f"Select the correct answer for Question {i+1}", options)
            question['answer'] = answer_key.lower()
        elif question_type == "Input":
            answer_key = st.text_input(f"Enter the correct answer for Question {i+1}")
            question['answer'] = answer_key.lower()

        questions.append(question)

    if st.button("Save Quiz"):
        if quiz_name:
            save_quiz({"quiz_name": quiz_name, "questions": questions})
            st.success("Quiz saved successfully!")
        else:
            st.error("Quiz name is required.")

# Quiz Game UI
def quiz_game_ui():
    quizzes = load_quiz()

    if not quizzes:
        st.error("No quizzes available. Please create a quiz first.")
        return
    
    st.title("Welcome to the Quiz Game!")

    if 'username' not in st.session_state:
        st.session_state.username = None

    if st.session_state.username is None:
        username = st.text_input("Enter your username")
        if st.button("Start Game") and username:
            if username_exists(username):
                st.error("Username already taken. Please choose another one.")
            else:
                st.session_state.username = username
                st.session_state.current_question = 0
                st.session_state.start_time = time.time()
                st.session_state.score = 0
                st.session_state.selected_quiz = st.selectbox("Select a Quiz", [quiz['quiz_name'] for quiz in quizzes])
        else:
            st.warning("Please enter a username and click 'Start Game'.")
        return

    if st.session_state.username and st.session_state.selected_quiz:
        quiz = next(q for q in quizzes if q['quiz_name'] == st.session_state.selected_quiz)
        questions = quiz['questions']
        total_questions = len(questions)

        if st.session_state.current_question < total_questions:
            # Get current question
            q = questions[st.session_state.current_question]
            st.write(f"Question {st.session_state.current_question + 1}:")
            
            # Handle question type
            if q['type'] == 'mcq':
                st.write(q['content'])
                options = q['options']
                option_selected = st.radio("Select an option:", options)
            elif q['type'] == 'input':
                st.write(q['content'])
                option_selected = st.text_input("Your answer:")

            # Timer for each question (15 seconds)
            elapsed_time = time.time() - st.session_state.start_time
            remaining_time = max(15 - int(elapsed_time), 0)
            st.write(f"Time left: {remaining_time} seconds")
            
            if remaining_time == 0 or st.button("Submit Answer"):
                # Check answer
                if option_selected.lower() == q['answer']:
                    st.session_state.score += 1

                # Move to the next question
                st.session_state.current_question += 1
                st.session_state.start_time = time.time()  # Reset the timer for the next question
                st.experimental_rerun()  # Rerun to show the next question
        else:
            # Game over, show score
            st.write(f"Game over! Your score: {st.session_state.score}")
            save_user(st.session_state.username, st.session_state.score)
            
            # Reset game state
            st.session_state.current_question = 0
            st.session_state.start_time = None
            st.session_state.score = 0
            st.session_state.username = None
            st.session_state.selected_quiz = None
            
            # Show leaderboard
            st.write("Leaderboard")
            users = load_users()
            sorted_users = sorted(users.items(), key=lambda x: x[1], reverse=True)
            for user, user_score in sorted_users:
                st.write(f"{user}: {user_score}")

if __name__ == "__main__":
    option = st.sidebar.selectbox("Choose an action", ["Play Quiz", "Create Quiz"])

    if option == "Play Quiz":
        quiz_game_ui()
    elif option == "Create Quiz":
        create_quiz_ui()