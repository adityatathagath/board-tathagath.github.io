<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Populate Name Box</title>
    <!-- Include Tailwind CSS -->
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        .name {
            position: absolute;
        }
    </style>
</head>
<body class="bg-gray-100">
    <div id="nameBox" class="relative w-80 h-80 border border-gray-600 bg-white">
        <!-- Names will be dynamically added here -->
    </div>

    <script>
        // Example data of names
        const names = ['John', 'Emily', 'Michael', 'Sophia', 'William'];

        // Object to store initial positions of names
        const initialPositions = {};

        // Function to generate random position within box boundaries without overlapping
        function getRandomPositionWithoutOverlap(nameBox, nameElement, existingPositions) {
            const maxAttempts = 100; // Maximum number of attempts to find a non-overlapping position
            const padding = 10; // Padding value in pixels

            for (let attempt = 0; attempt < maxAttempts; attempt++) {
                const left = Math.max(Math.random() * (nameBox.offsetWidth - nameElement.offsetWidth - padding * 2), padding);
                const top = Math.max(Math.random() * (nameBox.offsetHeight - nameElement.offsetHeight - padding * 2), padding);

                // Check for collisions with existing positions
                let collision = false;
                for (const existingPosition of Object.values(existingPositions)) {
                    if (
                        left < existingPosition.left + existingPosition.width &&
                        left + nameElement.offsetWidth > existingPosition.left &&
                        top < existingPosition.top + existingPosition.height &&
                        top + nameElement.offsetHeight > existingPosition.top
                    ) {
                        collision = true;
                        break;
                    }
                }

                if (!collision) {
                    return { left, top };
                }
            }

            // If maximum attempts reached without finding a non-overlapping position, fallback to random position
            return {
                left: Math.max(Math.random() * (nameBox.offsetWidth - nameElement.offsetWidth), 0),
                top: Math.max(Math.random() * (nameBox.offsetHeight - nameElement.offsetHeight), 0)
            };
        }

        // Function to populate name box with participant names without overlapping and with styles
        function populateNameBox() {
            const nameBox = document.getElementById('nameBox');
            nameBox.innerHTML = ''; // Clear existing content

            // Loop through names and add them to the name box with initial positions and animation
            names.forEach((name, index) => {
                const nameElement = document.createElement('div');
                nameElement.classList.add('name');
                nameElement.classList.add('text-xl'); // Example Tailwind CSS class

                // Split the name into two halves
                const midpoint = Math.ceil(name.length / 2);
                const firstHalf = name.slice(0, midpoint);
                const secondHalf = name.slice(midpoint);

                // Create spans for each half and apply styles
                const firstSpan = document.createElement('span');
                firstSpan.textContent = firstHalf;
                firstSpan.classList.add('text-sky-500'); // Tailwind CSS color class

                const secondSpan = document.createElement('span');
                secondSpan.textContent = secondHalf;
                secondSpan.classList.add('text-navy-500'); // Tailwind CSS color class

                // Append spans to name element
                nameElement.appendChild(firstSpan);
                nameElement.appendChild(secondSpan);

                // Apply position and animation without overlapping
                const { left, top } = getRandomPositionWithoutOverlap(nameBox, nameElement, initialPositions);

                // Store initial position and size
                const position = { left, top, width: nameElement.offsetWidth, height: nameElement.offsetHeight };
                initialPositions[name] = position;

                // Apply position and animation
                nameElement.style.left = `${position.left}px`;
                nameElement.style.top = `${position.top}px`;
                nameElement.style.animationDelay = `${index * 0.5}s`; // Adjust delay between animations

                nameBox.appendChild(nameElement);
            });
        }

        // Populate name box initially
        populateNameBox();

        // Optionally, update the name box periodically with new data
        // Example: Update name box every 5 seconds
        setInterval(populateNameBox, 5000);
    </script>
</body>
</html>




<div class="bg-white rounded-lg shadow-md p-6 w-80">
  <h2 class="text-xl font-bold mb-4">Participants</h2>
  <div class="grid grid-cols-2 gap-4">
    {% for participant in participant_names %}
    <div class="participant bg-navyBlue text-white rounded-lg p-2 flex items-center justify-center transition-transform duration-300 transform hover:scale-110">
      {{ participant }}
    </div>
    {% endfor %}
  </div>
</div>



<div class="bg-white rounded-lg shadow-md p-6 w-80">
  <h2 class="text-xl font-bold mb-4">Participants</h2>
  <div id="participantContainer" class="grid grid-cols-2 gap-4">
    <!-- Participant names will be dynamically added here -->
  </div>
</div>

<script>
  // Fetch participant names from Flask backend
  fetch('/participants')
    .then(response => response.json())
    .then(data => {
      const participantContainer = document.getElementById('participantContainer');
      data.forEach(participant => {
        const participantDiv = document.createElement('div');
        participantDiv.classList.add('participant', 'bg-navyBlue', 'text-white', 'rounded-lg', 'p-2', 'flex', 'items-center', 'justify-center', 'transition-transform', 'duration-300', 'transform', 'hover:scale-110');
        participantDiv.textContent = participant;
        participantContainer.appendChild(participantDiv);
      });
    })
    .catch(error => console.error('Error fetching participant names:', error));
</script>








<div class="bg-white rounded-lg shadow-md p-6 w-80">
  <h2 class="text-xl font-bold mb-4">Participants</h2>
  <div id="participantContainer" class="grid grid-cols-2 gap-4">
    <!-- Participant names will be dynamically added here -->
  </div>
</div>

<script>
  function getRandomPosition(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  function getRandomColor() {
    const colors = ["bg-navyBlue", "bg-skyBlue"];
    return colors[Math.floor(Math.random() * colors.length)];
  }

  function createParticipantDiv(participant) {
    const participantDiv = document.createElement('div');
    participantDiv.classList.add('participant', getRandomColor(), 'text-white', 'rounded-lg', 'p-2', 'flex', 'items-center', 'justify-center', 'transition-transform', 'duration-500', 'transform', 'hover:scale-110');
    participantDiv.style.position = 'absolute';
    participantDiv.textContent = participant;
    participantDiv.style.top = getRandomPosition(0, window.innerHeight - 50) + 'px';
    participantDiv.style.left = getRandomPosition(0, window.innerWidth - 200) + 'px';
    document.getElementById('participantContainer').appendChild(participantDiv);
  }

  function animateParticipants() {
    const participants = document.querySelectorAll('.participant');
    participants.forEach(participant => {
      participant.classList.toggle('scale-90');
    });
  }

  setInterval(animateParticipants, 1000);

  // Fetch participant names from Flask backend
  fetch('/participants')
    .then(response => response.json())
    .then(data => {
      data.forEach(participant => {
        createParticipantDiv(participant);
      });
    })
    .catch(error => console.error('Error fetching participant names:', error));
</script>