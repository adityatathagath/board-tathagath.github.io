You can achieve this using Flask for the backend and JavaScript (along with TailwindCSS) for the frontend. Here's a step-by-step guide:

### 1. Create the Form in HTML
First, ensure your form is set up correctly in your HTML template.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Form Example</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mx-auto p-4">
        <form id="fetchForm" class="space-y-4">
            <input type="text" name="input1" placeholder="Input 1" class="block w-full p-2 border border-gray-300 rounded">
            <input type="text" name="input2" placeholder="Input 2" class="block w-full p-2 border border-gray-300 rounded">
            <input type="text" name="input3" placeholder="Input 3" class="block w-full p-2 border border-gray-300 rounded">
            <input type="text" name="input4" placeholder="Input 4" class="block w-full p-2 border border-gray-300 rounded">
            <button type="submit" class="block w-full bg-blue-500 text-white p-2 rounded">Fetch</button>
        </form>
        <div id="loading" class="hidden text-center mt-4">Loading...</div>
        <div id="message" class="hidden text-center mt-4"></div>
    </div>
    <script>
        document.getElementById('fetchForm').addEventListener('submit', async function(event) {
            event.preventDefault();
            
            // Show loading element and disable form
            document.getElementById('loading').classList.remove('hidden');
            document.querySelectorAll('#fetchForm input, #fetchForm button').forEach(el => el.disabled = true);

            // Get form data
            const formData = new FormData(this);

            // Send data to Flask endpoint
            const response = await fetch('/fetch', {
                method: 'POST',
                body: formData
            });

            // Parse the JSON response
            const result = await response.json();

            // Hide loading element
            document.getElementById('loading').classList.add('hidden');

            // Enable form
            document.querySelectorAll('#fetchForm input, #fetchForm button').forEach(el => el.disabled = false);

            // Show the message
            const messageEl = document.getElementById('message');
            messageEl.textContent = result.message;
            messageEl.classList.remove('hidden');
        });
    </script>
</body>
</html>
```

### 2. Set Up the Flask Backend
Next, set up the Flask backend to handle the form submission and return the appropriate message.

```python
from flask import Flask, request, jsonify, render_template

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/fetch', methods=['POST'])
def fetch():
    # Get the form data
    input1 = request.form['input1']
    input2 = request.form['input2']
    input3 = request.form['input3']
    input4 = request.form['input4']

    # Call your fetch_df function
    result = fetch_df(input1, input2, input3, input4)

    # Return the result as JSON
    return jsonify({'message': result})

def fetch_df(input1, input2, input3, input4):
    # Your existing function logic
    # For example:
    if all([input1, input2, input3, input4]):
        return 'success'
    else:
        return 'failed'

if __name__ == '__main__':
    app.run(debug=True)
```

### Explanation
1. **HTML Form**: This contains four input fields and a submit button. There's a loading element that is initially hidden and a message element for displaying the result.
2. **JavaScript**: This handles form submission asynchronously using `fetch`. It shows the loading element, disables the form, and then sends the form data to the Flask endpoint. Once the response is received, it hides the loading element, enables the form, and displays the message.
3. **Flask Backend**: This handles the form submission, calls the `fetch_df` function with the form inputs, and returns the result as a JSON response.

With this setup, your form will display a loading indicator while the `fetch_df` function processes the input, and then show the success or failure message in a dialog box.