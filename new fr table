import sqlite3
import pandas as pd
import plotly.express as px
from dash import Dash, html, dcc, Input, Output, callback
import dash_bootstrap_components as dbc
import dash_ag_grid as dag

DB_PATH = "historical_data.db"  # update with your database path

# --- Database Functions ---
def get_distinct_cob_dates(table_name):
    """Return a sorted list of distinct COB dates from the given table."""
    conn = sqlite3.connect(DB_PATH)
    query = f"SELECT DISTINCT [COB Date] FROM {table_name} ORDER BY [COB Date]"
    dates = pd.read_sql(query, conn).iloc[:,0].astype(str).tolist()
    conn.close()
    return dates

def get_data_for_cob_date(cob_date, table_name):
    """Fetch data from the specified table for the given COB date."""
    conn = sqlite3.connect(DB_PATH)
    query = f"SELECT * FROM {table_name} WHERE [COB Date] = ?"
    df = pd.read_sql(query, conn, params=[cob_date])
    conn.close()
    return df

# --- Data Processing Functions ---
def process_data_for_ag_grid(df):
    """
    Process a flat DataFrame into a list of dicts that include a 'dataPath' field.
    The dataPath is computed using a simple stack algorithm based on 'Node Level'.
    """
    rows = df.to_dict("records")
    processed = []
    stack = []
    for row in rows:
        try:
            level = int(row.get("Node Level", 0))
        except (ValueError, TypeError):
            level = 0
        node_name = row.get("Node Name", "")
        while stack and stack[-1][0] >= level:
            stack.pop()
        if stack:
            path = stack[-1][1] + [node_name]
        else:
            path = [node_name]
        row["path"] = path  # add hierarchy path for ag-grid
        processed.append(row)
        stack.append((level, path))
    return processed

def indent_node_name(name, level):
    """
    Return the node name preceded by a number of non-breaking space characters.
    Uses the Unicode non-breaking space (\u00A0).
    For example, level 3: 4 spaces; level 4: 8 spaces; level 5: 12 spaces; etc.
    """
    try:
        level_int = int(level)
    except (ValueError, TypeError):
        level_int = 0
    if level_int >= 3:
        indent_count = (level_int - 2) * 4
        return "\u00A0" * indent_count + name
    return name

# --- Preload Dropdown Options ---
initial_dates = get_distinct_cob_dates("Sheet1_data_alloc")
dropdown_options = [{"label": d, "value": d} for d in initial_dates]

# --- Initialize Dash App ---
external_stylesheets = [dbc.themes.FLATLY]
app = Dash(__name__, external_stylesheets=external_stylesheets)

# --- Layout Components ---
# Navbar with a theme toggle in the right.
navbar = dbc.Navbar(
    dbc.Container([
        dbc.NavbarBrand("Modern Dashboard", className="ms-2"),
        dbc.Nav(
            [dbc.NavItem(dbc.NavLink("Home", href="#"))],
            className="me-auto", navbar=True
        ),
        html.Div(
            dcc.RadioItems(
                id="theme-selector",
                options=[
                    {"label": "Light Mode", "value": "light"},
                    {"label": "Dark Mode", "value": "dark"}
                ],
                value="light",
                inline=True,
                labelStyle={'margin-right': '10px'}
            ),
            className="ms-auto"
        )
    ]),
    color="primary",
    dark=True,
    sticky="top"
)

# Main body: dropdown to select COB date and a button.
body = dbc.Container([
    dbc.Row(
        dbc.Col(
            dbc.Card([
                dbc.CardBody([
                    dbc.Row(
                        dbc.Col(
                            dcc.Dropdown(id="cob-dropdown", options=dropdown_options,
                                         placeholder="Select a COB Date", clearable=False),
                            width=6
                        )
                    ),
                    dbc.Row(
                        dbc.Col(
                            dbc.Button("Show Dashboard", id="show-btn", color="primary", className="mt-3"),
                            width={"size": 2, "offset": 5}
                        )
                    )
                ])
            ], className="my-4")
        )
    ),
    dbc.Row(
        dbc.Col(html.Div(id="dashboard-container"))
    )
], fluid=True)

# Final layout.
app.layout = html.Div([navbar, body])

# --- Callback to Update Dashboard ---
@app.callback(
    Output("dashboard-container", "children"),
    [Input("show-btn", "n_clicks")],
    [State("cob-dropdown", "value"), State("theme-selector", "value")]
)
def update_dashboard(n_clicks, selected_date, theme):
    if n_clicks and selected_date:
        df_alloc = get_data_for_cob_date(selected_date, "Sheet1_data_alloc")
        df_stand = get_data_for_cob_date(selected_date, "Sheet1_data_stand")
        if df_alloc.empty and df_stand.empty:
            return dbc.Alert("No data found for the selected COB date.", color="warning", className="text-center")
        
        # Indent Node Name using our function and drop 'Node Level' from display.
        def indent_row(row):
            try:
                level = int(row.get("Node Level", 0))
            except (ValueError, TypeError):
                level = 0
            return indent_node_name(row.get("Node Name", ""), level)
        
        if not df_alloc.empty:
            df_alloc["Node Name"] = df_alloc.apply(indent_row, axis=1)
        if not df_stand.empty:
            df_stand["Node Name"] = df_stand.apply(indent_row, axis=1)
        
        # Process data for hierarchical display (add 'path' for ag-grid).
        processed_alloc = process_data_for_ag_grid(df_alloc)
        processed_stand = process_data_for_ag_grid(df_stand)
        
        # Define column definitions.
        # Do not include "Node Level" column since we want to hide it.
        # Set up the auto group column for Node Name.
        column_defs = [
            {"field": "Node Name", "headerName": "Node Name", "cellRenderer": "agGroupCellRenderer"},
            {"field": "Node ID", "headerName": "Node ID"},
            # Add all other columns except Node Level and COB Date:
        ]
        # Include all other columns (preserving order) except "Node Level" and "COB Date"
        for col in df_alloc.columns:
            if col not in {"Node Name", "Node ID", "Node Level", "COB Date"}:
                # For numeric columns, add conditional cell styling via AG Grid's built-in mechanism.
                column_defs.append({"field": col, "headerName": col})
        
        # Create AG Grid components.
        grid_alloc = dag.AgGrid(
            id="grid-alloc",
            columnDefs=column_defs,
            rowData=processed_alloc,
            dashGridOptions={
                "enableSorting": True,
                "treeData": True,
                "js_getDataPath": "function(data) { return data.path; }",
                "groupDefaultExpanded": 1
            },
            style={"height": "400px", "width": "100%"}
        )
        
        grid_stand = dag.AgGrid(
            id="grid-stand",
            columnDefs=column_defs,
            rowData=processed_stand,
            dashGridOptions={
                "enableSorting": True,
                "treeData": True,
                "js_getDataPath": "function(data) { return data.path; }",
                "groupDefaultExpanded": 1
            },
            style={"height": "400px", "width": "100%"}
        )
        
        # Create a sunburst chart from df_alloc (using 'Total' column for values).
        if "Total" in df_alloc.columns:
            fig = px.sunburst(
                df_alloc,
                path=['Node Level', 'Node Name'],
                values='Total',
                title="Sunburst of Total by Node Level and Node Name"
            )
        else:
            fig = px.sunburst(title="Sunburst Chart")
        sunburst_chart = dcc.Graph(figure=fig)
        
        return html.Div([
            html.H4(f"Sheet1_data_alloc for COB Date: {selected_date}", className="my-3 text-center"),
            grid_alloc,
            html.H4(f"Sheet1_data_stand for COB Date: {selected_date}", className="my-3 text-center"),
            grid_stand,
            html.H4("Sunburst Visualization", className="my-3 text-center"),
            sunburst_chart
        ])
    return html.Div("Please select a COB date and click 'Show Dashboard'.", className="text-center")

if __name__ == "__main__":
    app.run_server(debug=True)