import pandas as pd
from flask import Flask, render_template, jsonify

app = Flask(__name__)

# Load the data from the Excel file
df = pd.read_excel('ecodamus.xlsx', sheet_name='summary', header=None)

# Extract ranks (Row 1)
ranks = df.iloc[0, 1:].values.tolist()

# Extract player names (Row 2)
player_names = df.iloc[1, 1:].values.tolist()

# Extract asset class scores (Rows 3 to 17)
asset_classes = df.iloc[2:17, 0].values.tolist()  # Asset classes are in rows 3-17, column 1
asset_scores = df.iloc[2:17, 1:].values.tolist()  # Player scores for 15 asset classes

# Extract total scores (Row 18)
total_scores = df.iloc[17, 1:].values.tolist()

# Preparing the top players for leaderboard
player_data = {
    'rank': ranks,
    'name': player_names,
    'total_score': total_scores
}
top_players_df = pd.DataFrame(player_data)

# Sorting the top players by total score and selecting the top 10
top_players = top_players_df.sort_values(by='total_score', ascending=False).head(10)

# Function to get data for player comparison
def get_spider_data(player1, player2):
    player1_data = df[df.iloc[1, 1:] == player1].iloc[2:17, 1:].values.flatten()
    player2_data = df[df.iloc[1, 1:] == player2].iloc[2:17, 1:].values.flatten()
    return player1_data.tolist(), player2_data.tolist()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/top_players')
def top_players_data():
    return jsonify(top_players.to_dict(orient='records'))

@app.route('/search/<name>')
def search(name):
    player_data = df[df.iloc[1, 1:].str.contains(name, case=False, na=False)]
    return jsonify(player_data.to_dict(orient='records'))

@app.route('/compare/<player1>/<player2>')
def compare(player1, player2):
    player1_data, player2_data = get_spider_data(player1, player2)
    return jsonify({'player1': player1_data, 'player2': player2_data})

@app.route('/charts')
def charts():
    return jsonify({
        'asset_class_contributions': asset_scores,
        'average_scores': df.iloc[2:17, 1:].mean(axis=0).values.tolist()
    })

if __name__ == "__main__":
    app.run(debug=True)


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ecodamus - Game Analysis</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.0.3/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-900 text-white">
    <!-- Navbar -->
    <nav class="bg-cyan-600 p-4">
        <div class="container mx-auto text-center">
            <h1 class="text-4xl font-bold">Ecodamus Game Analysis</h1>
        </div>
    </nav>

    <!-- Top Players with Search -->
    <section class="mt-6">
        <div class="container mx-auto">
            <input type="text" id="searchBar" placeholder="Search Player..." class="px-4 py-2 mb-4 w-full bg-gray-800 text-white rounded">
            <div id="leaderboard">
                <h2 class="text-xl font-semibold">Top 10 Players</h2>
                <table class="table-auto w-full mt-4">
                    <thead>
                        <tr class="bg-cyan-500">
                            <th class="px-4 py-2">Rank</th>
                            <th class="px-4 py-2">Player</th>
                            <th class="px-4 py-2">Total Score</th>
                        </tr>
                    </thead>
                    <tbody id="leaderboardTable">
                    </tbody>
                </table>
            </div>
        </div>
    </section>

    <!-- Charts Section -->
    <section class="mt-8">
        <div class="container mx-auto grid grid-cols-1 md:grid-cols-2 gap-8">
            <div>
                <h2 class="text-xl font-semibold mb-4">Asset Class Contribution to Total Score</h2>
                <canvas id="assetContributionChart"></canvas>
            </div>
            <div>
                <h2 class="text-xl font-semibold mb-4">Performance Across Asset Classes</h2>
                <canvas id="performanceChart"></canvas>
            </div>
        </div>
        
        <div class="container mx-auto grid grid-cols-1 md:grid-cols-2 gap-8 mt-8">
            <div>
                <h2 class="text-xl font-semibold mb-4">Score Distribution</h2>
                <canvas id="scoreDistributionChart"></canvas>
            </div>
            <div>
                <h2 class="text-xl font-semibold mb-4">Top Asset Classes by Average Score</h2>
                <canvas id="averageScoreChart"></canvas>
            </div>
        </div>

        <div class="container mx-auto mt-8">
            <h2 class="text-xl font-semibold mb-4">Compare Two Players</h2>
            <input type="text" id="player1" placeholder="Player 1" class="px-4 py-2 mb-4 w-full bg-gray-800 text-white rounded">
            <input type="text" id="player2" placeholder="Player 2" class="px-4 py-2 mb-4 w-full bg-gray-800 text-white rounded">
            <button id="compareButton" class="bg-green-600 px-4 py-2 rounded text-white">Compare</button>
            <canvas id="spiderChart"></canvas>
        </div>
    </section>

    <script>
        let topPlayers = [];
        let assetContributionData = [];
        let performanceData = [];
        let averageScores = [];

        // Fetch initial data when the page loads
        function fetchInitialData() {
            $.ajax({
                url: '/top_players',
                method: 'GET',
                success: function(data) {
                    topPlayers = data;
                    updateLeaderboard();
                }
            });

            $.ajax({
                url: '/charts',
                method: 'GET',
                success: function(data) {
                    assetContributionData = data.asset_class_contributions;
                    performanceData = data.performance_data;
                    averageScores = data.average_scores;
                    updateCharts();
                }
            });
        }

        // Update leaderboard table
        function updateLeaderboard() {
            let tableContent = '';
            topPlayers.forEach(player => {
                tableContent += `
                    <tr>
                        <td class="px-4 py-2">${player['Rank']}</td>
                        <td class="px-4 py-2">${player['Name']}</td>
                        <td class="px-4 py-2">${player['Total Score']}</td>
                    </tr>
                `;
            });
            $('#leaderboardTable').html(tableContent);
        }

        // Update all charts
        function updateCharts() {
            const assetContributionChart = new Chart(document.getElementById('assetContributionChart'), {
                type: 'pie',
                data: {
                    labels: ['Asset 1', 'Asset 2', 'Asset 3', 'Asset 4', 'Asset 5'],
                    datasets: [{
                        data: assetContributionData[0],  // Example: Displaying the first playerâ€™s data
                        backgroundColor: ['#4CAF50', '#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107'],
                        borderColor: '#fff',
                        borderWidth: 2
                    }]
                }
            });

            const performanceChart = new Chart(document.getElementById('performanceChart'), {
                type: 'bar',
                data: {
                    labels: ['Asset 1', 'Asset 2', 'Asset 3', 'Asset 4', 'Asset 5'],
                    datasets: performanceData.map((player, index) => ({
                        label: `Player ${topPlayers[index].Name}`,
                        data: player,
                        backgroundColor: 'rgba(0, 150, 136, 0.6)',
                        borderColor: 'rgba(0, 150, 136, 1)',
                        borderWidth: 1
                    }))
                }
            });

            const scoreDistributionChart = new Chart(document.getElementById('scoreDistributionChart'), {
                type: 'histogram',
                data: {
                    labels: ['Player 1', 'Player 2', 'Player 3', 'Player 4', 'Player 5'],
                    datasets: [{
                        label: 'Total Score Distribution',
                        data: topPlayers.map(player => player['Total Score']),
                        backgroundColor: '#FFEB3B',
                        borderColor: '#FFC107',
                        borderWidth: 2
                    }]
                }
            });

            const averageScoreChart = new Chart(document.getElementById('averageScoreChart'), {
                type: 'bar',
                data: {
                    labels: ['Asset 1', 'Asset 2', 'Asset 3', 'Asset 4', 'Asset 5'],
                    datasets: [{
                        label: 'Average Score by Asset',
                        data: averageScores,
                        backgroundColor: '#00BCD4',
                        borderColor: '#0097A7',
                        borderWidth: 1
                    }]
                }
            });
        }

        // Handle Player Search
        $('#searchBar').on('input', function() {
            const searchTerm = $(this).val();
            $.ajax({
                url: `/search/${searchTerm}`,
                method: 'GET',
                success: function(response) {
                    topPlayers = response;
                    updateLeaderboard();
                }
            });
        });

        // Handle Player Comparison
        $('#compareButton').on('click', function() {
            const player1 = $('#player1').val();
            const player2 = $('#player2').val();
            $.ajax({
                url: `/compare/${player1}/${player2}`,
                method: 'GET',
                success: function(data) {
                    const ctx = document.getElementById('spiderChart').getContext('2d');
                    new Chart(ctx, {
                        type: 'radar',
                        data: {
                            labels: ['Asset 1', 'Asset 2', 'Asset 3', 'Asset 4', 'Asset 5'],
                            datasets: [
                                {
                                    label: player1,
                                    data: data.player1,
                                    backgroundColor: 'rgba(0, 150, 136, 0.3)',
                                    borderColor: 'rgba(0, 150, 136, 1)',
                                    borderWidth: 1
                                },
                                {
                                    label: player2,
                                    data: data.player2,
                                    backgroundColor: 'rgba(255, 87, 34, 0.3)',
                                    borderColor: 'rgba(255, 87, 34, 1)',
                                    borderWidth: 1
                                }
                            ]
                        }
                    });
                }
            });
        });

        // Fetch data when the page loads
        fetchInitialData();
    </script>
</body>
</html>
